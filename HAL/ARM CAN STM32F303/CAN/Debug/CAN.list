
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002658  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002844  08002844  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002844  08002844  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002844  08002844  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800284c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000020  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004927  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010d7  00000000  00000000  000249aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000480  00000000  00000000  00025a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000033d  00000000  00000000  00025f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019115  00000000  00000000  00026245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006097  00000000  00000000  0003f35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000926e7  00000000  00000000  000453f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001008  00000000  00000000  000d7ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000d8ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027c8 	.word	0x080027c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080027c8 	.word	0x080027c8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b09a      	sub	sp, #104	; 0x68
 80001cc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80001ce:	f000 fdd5 	bl	8000d7c <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f869 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  HAL_MspInit();
 80001d6:	f000 f8db 	bl	8000390 <HAL_MspInit>
  HAL_CAN_MspInit();
 80001da:	f000 f8fd 	bl	80003d8 <HAL_CAN_MspInit>
  MX_GPIO_Init();
 80001de:	f000 f89f 	bl	8000320 <MX_GPIO_Init>
  //MX_CAN_Init();
  S_CAN_INIT_CONFIG initConfig={LOOPBACK_MODE,ENABLE,DISABLE,DISABLE,ENABLE,DISABLE};
 80001e2:	4a2d      	ldr	r2, [pc, #180]	; (8000298 <main+0xd0>)
 80001e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001ec:	6018      	str	r0, [r3, #0]
 80001ee:	3304      	adds	r3, #4
 80001f0:	8019      	strh	r1, [r3, #0]
  S_CAN_BITIME_CONFIG bitime={PRESCALER_32,TS1_Q,TS2_Q};
 80001f2:	4b2a      	ldr	r3, [pc, #168]	; (800029c <main+0xd4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_filterxConfig FILTERX_CONFIG={MSK_MODE,SINGLE_32,FIFO0,ENABLE,0X0000,0X123<<5,0X0000,0X123<<5,10};
 80001f8:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <main+0xd8>)
 80001fa:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80001fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  S_CAN_TXFRAME TX_FRAME={STD_ID,0X123,0,1,1,DISABLE};
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <main+0xdc>)
 8000206:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800020a:	461d      	mov	r5, r3
 800020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000210:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000214:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t DATA_TX[8]={'A'};
 8000218:	2341      	movs	r3, #65	; 0x41
 800021a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800021c:	2300      	movs	r3, #0
 800021e:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t MAILBOX_CODE;
  /*initialize the can */
  HAL_CAN_vInit(&initConfig,&bitime);
 8000220:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000224:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000228:	4611      	mov	r1, r2
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fa2a 	bl	8000684 <HAL_CAN_vInit>
  /*set debuging mode (loopback)*/
  HAL_CAN_vDebugMode(&initConfig);
 8000230:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9d9 	bl	80005ec <HAL_CAN_vDebugMode>
  /*set RX filter configuration*/
  HAL_CAN_FILTER_CONFIG(&FILTERX_CONFIG);
 800023a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fbc6 	bl	80009d0 <HAL_CAN_FILTER_CONFIG>
  /*acquire an access on the CAN bus */
  HAL_CAN_start();
 8000244:	f000 fa98 	bl	8000778 <HAL_CAN_start>
  /*prepare the TX frame and send*/
  HAL_CAN_pu8TXFRAME(&initConfig,&TX_FRAME, DATA_TX, & MAILBOX_CODE);
 8000248:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800024c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000250:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000254:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000258:	f000 fa96 	bl	8000788 <HAL_CAN_pu8TXFRAME>

  uint8_t status;
  do
  {		//wait until data is no longer pending
	  HAL_CAN_u8IS_TXFRAME_PENDING(&status,MAILBOX_CODE);
 800025c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000260:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000264:	4611      	mov	r1, r2
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fb8c 	bl	8000984 <HAL_CAN_u8IS_TXFRAME_PENDING>
  }
  while(status==0);
 800026c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000270:	2b00      	cmp	r3, #0
 8000272:	d0f3      	beq.n	800025c <main+0x94>
  S_CAN_RXFRAME RX_FRAME;
  uint8_t DATA_RX[8];
  uint8_t FRAMES_NUM;
 do
 {	//recieve the data in FIFO0 queue
	 HAL_CAN_psRXFRAME(&RX_FRAME, DATA_RX,FIFO0);
 8000274:	f107 0108 	add.w	r1, r7, #8
 8000278:	f107 0310 	add.w	r3, r7, #16
 800027c:	2200      	movs	r2, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fc7a 	bl	8000b78 <HAL_CAN_psRXFRAME>
	 //wait until FIFO0 no longer carry frames
	 HAL_CAN_RX_FRAMES_NUM(FIFO0,&FRAMES_NUM);
 8000284:	1dfb      	adds	r3, r7, #7
 8000286:	4619      	mov	r1, r3
 8000288:	2000      	movs	r0, #0
 800028a:	f000 fd53 	bl	8000d34 <HAL_CAN_RX_FRAMES_NUM>

 }while(FRAMES_NUM!=0);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1ef      	bne.n	8000274 <main+0xac>

  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0xcc>
 8000296:	bf00      	nop
 8000298:	080027e0 	.word	0x080027e0
 800029c:	080027e8 	.word	0x080027e8
 80002a0:	080027ec 	.word	0x080027ec
 80002a4:	080027fc 	.word	0x080027fc

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	; 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fa5a 	bl	8002770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 f822 	bl	8001328 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ea:	f000 f84b 	bl	8000384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f002 f84c 	bl	80023a4 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000312:	f000 f837 	bl	8000384 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3740      	adds	r7, #64	; 0x40
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <MX_GPIO_Init+0x60>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a11      	ldr	r2, [pc, #68]	; (8000380 <MX_GPIO_Init+0x60>)
 800033a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033e:	6153      	str	r3, [r2, #20]
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_GPIO_Init+0x60>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000356:	f000 ffcf 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800035a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000360:	2301      	movs	r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f000 fe4e 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000378:	bf00      	nop
 800037a:	3718      	adds	r7, #24
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000

08000384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038c:	e7fe      	b.n	800038c <Error_Handler+0x8>
	...

08000390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_MspInit+0x44>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <HAL_MspInit+0x44>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <HAL_MspInit+0x44>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <HAL_MspInit+0x44>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_MspInit+0x44>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <HAL_MspInit+0x44>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]
  {*/
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <HAL_CAN_MspInit+0x74>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <HAL_CAN_MspInit+0x74>)
 80003f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <HAL_CAN_MspInit+0x74>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b11      	ldr	r3, [pc, #68]	; (800044c <HAL_CAN_MspInit+0x74>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a10      	ldr	r2, [pc, #64]	; (800044c <HAL_CAN_MspInit+0x74>)
 800040c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <HAL_CAN_MspInit+0x74>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800041e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000422:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000424:	2302      	movs	r3, #2
 8000426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800042c:	2303      	movs	r3, #3
 800042e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000430:	2309      	movs	r3, #9
 8000432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4619      	mov	r1, r3
 800043a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043e:	f000 fde9 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  //}

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <NMI_Handler+0x4>

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <MemManage_Handler+0x4>

08000462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <UsageFault_Handler+0x4>

0800046e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 fcb4 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <SystemInit+0x20>)
 80004aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ae:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <SystemInit+0x20>)
 80004b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000500 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004cc:	f7ff ffea 	bl	80004a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d2:	490d      	ldr	r1, [pc, #52]	; (8000508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <LoopForever+0xe>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e8:	4c0a      	ldr	r4, [pc, #40]	; (8000514 <LoopForever+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004f6:	f002 f943 	bl	8002780 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004fa:	f7ff fe65 	bl	80001c8 <main>

080004fe <LoopForever>:

LoopForever:
    b LoopForever
 80004fe:	e7fe      	b.n	80004fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000500:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800050c:	0800284c 	.word	0x0800284c
  ldr r2, =_sbss
 8000510:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000514:	20000030 	.word	0x20000030

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <HAL_CAN_LEAVE_SLEEP_MODE>:
}



void HAL_CAN_LEAVE_SLEEP_MODE(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_SLEEP);
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f022 0202 	bic.w	r2, r2, #2
 800052e:	601a      	str	r2, [r3, #0]
	while((READ_BIT(CAN_INSTANCE->MSR,CAN_MSR_SLAK)>>CAN_MSR_SLAK_Pos)==HIGH);
 8000530:	bf00      	nop
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	085b      	lsrs	r3, r3, #1
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	2b01      	cmp	r3, #1
 8000540:	d0f7      	beq.n	8000532 <HAL_CAN_LEAVE_SLEEP_MODE+0x16>
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000004 	.word	0x20000004

08000554 <HAL_CAN_ENTER_INIT_MODE>:



void HAL_CAN_ENTER_INIT_MODE(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

	//for software initialization
	SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//SET INREQ BIT
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_CAN_ENTER_INIT_MODE+0x20>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_CAN_ENTER_INIT_MODE+0x20>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG RAISING
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK)==LOW);
 8000568:	bf00      	nop
 800056a:	4b02      	ldr	r3, [pc, #8]	; (8000574 <HAL_CAN_ENTER_INIT_MODE+0x20>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	e7fb      	b.n	800056a <HAL_CAN_ENTER_INIT_MODE+0x16>
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004

08000578 <HAL_CAN_LEAVE_INIT_MODE>:
}



void HAL_CAN_LEAVE_INIT_MODE(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//CLEAR INREQ BIT
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f022 0201 	bic.w	r2, r2, #1
 800058a:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG TO FALL
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK_Pos)==HIGH);
 800058c:	bf00      	nop
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b01      	cmp	r3, #1
 800059a:	d0f8      	beq.n	800058e <HAL_CAN_LEAVE_INIT_MODE+0x16>
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000004 	.word	0x20000004

080005ac <HAL_CAN_vsetbiTime>:



void HAL_CAN_vsetbiTime(S_CAN_BITIME_CONFIG* bitime)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	//HAL_CAN_ENTER_INIT_MODE();
	WRITE_REG(CAN_INSTANCE->BTR,((CAN_INSTANCE->BTR&0XFF000000)|(uint32_t)(bitime->prescaler<<CAN_BTR_BRP_Pos)|(uint32_t)(bitime->TS1_Qunata<<CAN_BTR_TS1_Pos)|(uint32_t)(bitime->TS2_Qunata<<CAN_BTR_TS2_Pos)));
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_CAN_vsetbiTime+0x3c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	8812      	ldrh	r2, [r2, #0]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7892      	ldrb	r2, [r2, #2]
 80005c8:	0412      	lsls	r2, r2, #16
 80005ca:	431a      	orrs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	78db      	ldrb	r3, [r3, #3]
 80005d0:	051b      	lsls	r3, r3, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_CAN_vsetbiTime+0x3c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	430a      	orrs	r2, r1
 80005da:	61da      	str	r2, [r3, #28]
};
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_CAN_vDebugMode>:

void HAL_CAN_vDebugMode(S_CAN_INIT_CONFIG* initConfig)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	HAL_CAN_ENTER_INIT_MODE();
 80005f4:	f7ff ffae 	bl	8000554 <HAL_CAN_ENTER_INIT_MODE>
	switch((initConfig->debugMode))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	d028      	beq.n	8000652 <HAL_CAN_vDebugMode+0x66>
 8000600:	2b05      	cmp	r3, #5
 8000602:	dc37      	bgt.n	8000674 <HAL_CAN_vDebugMode+0x88>
 8000604:	2b03      	cmp	r3, #3
 8000606:	d002      	beq.n	800060e <HAL_CAN_vDebugMode+0x22>
 8000608:	2b04      	cmp	r3, #4
 800060a:	d011      	beq.n	8000630 <HAL_CAN_vDebugMode+0x44>
						   break;
		case LOOPBACK_SILENT_MODE:SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
								  SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
								  break;
		default:
				break;
 800060c:	e032      	b.n	8000674 <HAL_CAN_vDebugMode+0x88>
		case SILENT_MODE:SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	69da      	ldr	r2, [r3, #28]
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800061c:	61da      	str	r2, [r3, #28]
			   	   	   	 CLEAR_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800062c:	61da      	str	r2, [r3, #28]
			   	   	   	 break;
 800062e:	e022      	b.n	8000676 <HAL_CAN_vDebugMode+0x8a>
		case LOOPBACK_MODE:CLEAR_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	69da      	ldr	r2, [r3, #28]
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800063e:	61da      	str	r2, [r3, #28]
						   SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	69da      	ldr	r2, [r3, #28]
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800064e:	61da      	str	r2, [r3, #28]
						   break;
 8000650:	e011      	b.n	8000676 <HAL_CAN_vDebugMode+0x8a>
		case LOOPBACK_SILENT_MODE:SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	69da      	ldr	r2, [r3, #28]
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000660:	61da      	str	r2, [r3, #28]
								  SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_CAN_vDebugMode+0x94>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000670:	61da      	str	r2, [r3, #28]
								  break;
 8000672:	e000      	b.n	8000676 <HAL_CAN_vDebugMode+0x8a>
				break;
 8000674:	bf00      	nop
		}
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000004 	.word	0x20000004

08000684 <HAL_CAN_vInit>:

void HAL_CAN_vInit(S_CAN_INIT_CONFIG* initConfig,S_CAN_BITIME_CONFIG* bitime)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	HAL_CAN_ENTER_INIT_MODE();
 800068e:	f7ff ff61 	bl	8000554 <HAL_CAN_ENTER_INIT_MODE>
/**************************************************************/
	if(!initConfig->IDENTIFIER_PRIORITY)//FIFO Priority
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	789b      	ldrb	r3, [r3, #2]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d108      	bne.n	80006ac <HAL_CAN_vInit+0x28>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 800069a:	4b36      	ldr	r3, [pc, #216]	; (8000774 <HAL_CAN_vInit+0xf0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b34      	ldr	r3, [pc, #208]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f042 0204 	orr.w	r2, r2, #4
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	e007      	b.n	80006bc <HAL_CAN_vInit+0x38>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 80006ac:	4b31      	ldr	r3, [pc, #196]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b30      	ldr	r3, [pc, #192]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f022 0204 	bic.w	r2, r2, #4
 80006ba:	601a      	str	r2, [r3, #0]
	}
/**************************************************************/

	if(!initConfig->AUTO_RETRANSMISSION)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d108      	bne.n	80006d6 <HAL_CAN_vInit+0x52>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f042 0210 	orr.w	r2, r2, #16
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	e007      	b.n	80006e6 <HAL_CAN_vInit+0x62>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f022 0210 	bic.w	r2, r2, #16
 80006e4:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->AUTO_BUSOFF_RECOVERY)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	78db      	ldrb	r3, [r3, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <HAL_CAN_vInit+0x7c>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <HAL_CAN_vInit+0xf0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e007      	b.n	8000710 <HAL_CAN_vInit+0x8c>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_CAN_vInit+0xf0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <HAL_CAN_vInit+0xf0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800070e:	601a      	str	r2, [r3, #0]
	}
/************************************************************/
	if(initConfig->AUTO_WAKEUP_MODE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d008      	beq.n	800072a <HAL_CAN_vInit+0xa6>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_CAN_vInit+0xf0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_CAN_vInit+0xf0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f042 0220 	orr.w	r2, r2, #32
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e007      	b.n	800073a <HAL_CAN_vInit+0xb6>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_CAN_vInit+0xf0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_CAN_vInit+0xf0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0220 	bic.w	r2, r2, #32
 8000738:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->TIME_TRIG_COM==ENABLE)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d108      	bne.n	8000754 <HAL_CAN_vInit+0xd0>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_CAN_vInit+0xf0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_CAN_vInit+0xf0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e007      	b.n	8000764 <HAL_CAN_vInit+0xe0>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <HAL_CAN_vInit+0xf0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_CAN_vInit+0xf0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000762:	601a      	str	r2, [r3, #0]
	}
	HAL_CAN_vsetbiTime(bitime);
 8000764:	6838      	ldr	r0, [r7, #0]
 8000766:	f7ff ff21 	bl	80005ac <HAL_CAN_vsetbiTime>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_CAN_start>:

void HAL_CAN_start(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	//ENTER THE NORMAL MODE
	HAL_CAN_LEAVE_INIT_MODE();
 800077c:	f7ff fefc 	bl	8000578 <HAL_CAN_LEAVE_INIT_MODE>
	HAL_CAN_LEAVE_SLEEP_MODE();
 8000780:	f7ff fecc 	bl	800051c <HAL_CAN_LEAVE_SLEEP_MODE>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_CAN_pu8TXFRAME>:
void HAL_CAN_pu8TXFRAME(S_CAN_INIT_CONFIG* initConfig,S_CAN_TXFRAME* TX_FRAME, uint8_t DATA[], uint8_t* MAILBOX_CODE)
{
 8000788:	b490      	push	{r4, r7}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
	//CHECK IF ANY MAILBOX IS EMPTY
	if((READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME0)>>CAN_TSR_TME0_Pos)||(READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME1)>>CAN_TSR_TME1_Pos)||(READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME2)>>CAN_TSR_TME2_Pos))
 8000796:	4b7a      	ldr	r3, [pc, #488]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d10e      	bne.n	80007c2 <HAL_CAN_pu8TXFRAME+0x3a>
 80007a4:	4b76      	ldr	r3, [pc, #472]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d107      	bne.n	80007c2 <HAL_CAN_pu8TXFRAME+0x3a>
 80007b2:	4b73      	ldr	r3, [pc, #460]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f000 80da 	beq.w	8000976 <HAL_CAN_pu8TXFRAME+0x1ee>
	{
		//READ 2 MAILBOX CODE BITS
		*MAILBOX_CODE=(CAN_INSTANCE->TSR & CAN_TSR_CODE)>>CAN_TSR_CODE_Pos;
 80007c2:	4b6f      	ldr	r3, [pc, #444]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	0e1b      	lsrs	r3, r3, #24
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	701a      	strb	r2, [r3, #0]

		/******************************************************************************************************************/
		//CHECK ID TYPE
		if(TX_FRAME->ID_TYPE==STD_ID)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d112      	bne.n	8000804 <HAL_CAN_pu8TXFRAME+0x7c>
		{
			//fill all mailbox registers
			CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR=(TX_FRAME->ID_TYPE)|(TX_FRAME->StdId)|(TX_FRAME->RTR);
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	431a      	orrs	r2, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	4964      	ldr	r1, [pc, #400]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 80007f0:	6809      	ldr	r1, [r1, #0]
 80007f2:	6838      	ldr	r0, [r7, #0]
 80007f4:	7800      	ldrb	r0, [r0, #0]
 80007f6:	431a      	orrs	r2, r3
 80007f8:	f100 0318 	add.w	r3, r0, #24
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	440b      	add	r3, r1
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	e021      	b.n	8000848 <HAL_CAN_pu8TXFRAME+0xc0>
		}
		else
		{
			SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR,CAN_TI0R_IDE);
 8000804:	4b5e      	ldr	r3, [pc, #376]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3318      	adds	r3, #24
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a5a      	ldr	r2, [pc, #360]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000816:	6811      	ldr	r1, [r2, #0]
 8000818:	683a      	ldr	r2, [r7, #0]
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	4610      	mov	r0, r2
 800081e:	f043 0204 	orr.w	r2, r3, #4
 8000822:	f100 0318 	add.w	r3, r0, #24
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	440b      	add	r3, r1
 800082a:	601a      	str	r2, [r3, #0]
			CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR=(TX_FRAME->ExtId)|(TX_FRAME->RTR);//fill all mailbox reigsters
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4952      	ldr	r1, [pc, #328]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000836:	6809      	ldr	r1, [r1, #0]
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	7800      	ldrb	r0, [r0, #0]
 800083c:	431a      	orrs	r2, r3
 800083e:	f100 0318 	add.w	r3, r0, #24
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	440b      	add	r3, r1
 8000846:	601a      	str	r2, [r3, #0]
		}
		/*****************************************************************************************************************/

		//SET DATA LENGTH
		CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR=(TX_FRAME->DLC & CAN_TDT0R_DLC);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	4a4c      	ldr	r2, [pc, #304]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 800084e:	6811      	ldr	r1, [r2, #0]
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	7812      	ldrb	r2, [r2, #0]
 8000854:	4610      	mov	r0, r2
 8000856:	f003 020f 	and.w	r2, r3, #15
 800085a:	f100 0318 	add.w	r3, r0, #24
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	440b      	add	r3, r1
 8000862:	3304      	adds	r3, #4
 8000864:	601a      	str	r2, [r3, #0]

		/*****************************************************************************************************************/

		/* Set up the Transmit Global Time mode ONLY IN TIME TRIGGERED COMMUNICATION MODE WITH DLC=8 BYTES*/
		if((TX_FRAME->GLOBAL_TRANSMISSION==ENABLE)||(initConfig->TIME_TRIG_COM==ENABLE)||TX_FRAME->DLC==8UL)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	7d1b      	ldrb	r3, [r3, #20]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d007      	beq.n	800087e <HAL_CAN_pu8TXFRAME+0xf6>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	795b      	ldrb	r3, [r3, #5]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d003      	beq.n	800087e <HAL_CAN_pu8TXFRAME+0xf6>
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	2b08      	cmp	r3, #8
 800087c:	d116      	bne.n	80008ac <HAL_CAN_pu8TXFRAME+0x124>
		{
			SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR,CAN_TDT1R_TGT);
 800087e:	4b40      	ldr	r3, [pc, #256]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3318      	adds	r3, #24
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	4413      	add	r3, r2
 800088c:	3304      	adds	r3, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a3b      	ldr	r2, [pc, #236]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000892:	6811      	ldr	r1, [r2, #0]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	4610      	mov	r0, r2
 800089a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800089e:	f100 0318 	add.w	r3, r0, #24
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	440b      	add	r3, r1
 80008a6:	3304      	adds	r3, #4
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e015      	b.n	80008d8 <HAL_CAN_pu8TXFRAME+0x150>
		}
		else
		{
			CLEAR_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR,CAN_TDT1R_TGT);
 80008ac:	4b34      	ldr	r3, [pc, #208]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	3318      	adds	r3, #24
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	4413      	add	r3, r2
 80008ba:	3304      	adds	r3, #4
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a30      	ldr	r2, [pc, #192]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 80008c0:	6811      	ldr	r1, [r2, #0]
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	4610      	mov	r0, r2
 80008c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008cc:	f100 0318 	add.w	r3, r0, #24
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	440b      	add	r3, r1
 80008d4:	3304      	adds	r3, #4
 80008d6:	601a      	str	r2, [r3, #0]
		}

		/******************************************************************************************************************/
		 /* INCLUDE the PRELOAD DATA */
		//HIGHER BYTES
		      WRITE_REG(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDHR,
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3307      	adds	r3, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	061a      	lsls	r2, r3, #24
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3306      	adds	r3, #6
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	041b      	lsls	r3, r3, #16
 80008e8:	431a      	orrs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3305      	adds	r3, #5
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	4313      	orrs	r3, r2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	3204      	adds	r2, #4
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	4614      	mov	r4, r2
 80008fc:	4a20      	ldr	r2, [pc, #128]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 80008fe:	6811      	ldr	r1, [r2, #0]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	7812      	ldrb	r2, [r2, #0]
 8000904:	4610      	mov	r0, r2
 8000906:	ea43 0204 	orr.w	r2, r3, r4
 800090a:	0103      	lsls	r3, r0, #4
 800090c:	440b      	add	r3, r1
 800090e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000912:	601a      	str	r2, [r3, #0]
		                ((uint32_t)DATA[7] << CAN_TDH0R_DATA7_Pos) |
		                ((uint32_t)DATA[6] << CAN_TDH0R_DATA6_Pos) |
		                ((uint32_t)DATA[5] << CAN_TDH0R_DATA5_Pos) |
		                ((uint32_t)DATA[4] << CAN_TDH0R_DATA4_Pos));
	    //LOWER BYTES
		      WRITE_REG(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDLR,
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3303      	adds	r3, #3
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	061a      	lsls	r2, r3, #24
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3302      	adds	r3, #2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	041b      	lsls	r3, r3, #16
 8000924:	431a      	orrs	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3301      	adds	r3, #1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	4313      	orrs	r3, r2
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	4614      	mov	r4, r2
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000938:	6811      	ldr	r1, [r2, #0]
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	4610      	mov	r0, r2
 8000940:	ea43 0204 	orr.w	r2, r3, r4
 8000944:	0103      	lsls	r3, r0, #4
 8000946:	440b      	add	r3, r1
 8000948:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800094c:	601a      	str	r2, [r3, #0]
		                ((uint32_t)DATA[2] << CAN_TDL0R_DATA2_Pos) |
		                ((uint32_t)DATA[1] << CAN_TDL0R_DATA1_Pos) |
		                ((uint32_t)DATA[0] << CAN_TDL0R_DATA0_Pos));
		/******************************************************************************************************************/
		/* Request transmission */
        SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR, CAN_TI0R_TXRQ);
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3318      	adds	r3, #24
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	4413      	add	r3, r2
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_CAN_pu8TXFRAME+0x1f8>)
 8000960:	6811      	ldr	r1, [r2, #0]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	4610      	mov	r0, r2
 8000968:	f043 0201 	orr.w	r2, r3, #1
 800096c:	f100 0318 	add.w	r3, r0, #24
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	440b      	add	r3, r1
 8000974:	601a      	str	r2, [r3, #0]

	}

}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bc90      	pop	{r4, r7}
 800097e:	4770      	bx	lr
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_CAN_u8IS_TXFRAME_PENDING>:
}



void HAL_CAN_u8IS_TXFRAME_PENDING(uint8_t* pendingStatus,uint8_t MAILBOX_CODE)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	*pendingStatus=0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]

	uint32_t MASK= CAN_TSR_TME0<<MAILBOX_CODE;
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	60fb      	str	r3, [r7, #12]

	if((READ_BIT(CAN_INSTANCE->TSR,MASK)>>(MAILBOX_CODE+CAN_TSR_TME0_Pos))!=0)
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_CAN_u8IS_TXFRAME_PENDING+0x48>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	401a      	ands	r2, r3
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	331a      	adds	r3, #26
 80009b0:	fa22 f303 	lsr.w	r3, r2, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <HAL_CAN_u8IS_TXFRAME_PENDING+0x3a>
	{
		*pendingStatus=1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
	}
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_CAN_FILTER_CONFIG>:
void HAL_CAN_RX_FIFO_DELOCKING()
{
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_RFLM);
}
void HAL_CAN_FILTER_CONFIG(s_filterxConfig* FRAMEX_CONFIG)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	if(FRAMEX_CONFIG->filterBank<=13UL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	2b0d      	cmp	r3, #13
 80009de:	f200 80c3 	bhi.w	8000b68 <HAL_CAN_FILTER_CONFIG+0x198>
	{
		//FILTER BANK INDEX MASK
		uint32_t filterIndexMsk=1UL<<(FRAMEX_CONFIG->filterBank);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	2201      	movs	r2, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	60fb      	str	r3, [r7, #12]

		/*****************************************************************************/
		//SET FINIT :FIFO INITIALIZATION MODE
		SET_BIT(CAN_INSTANCE->FMR,CAN_FMR_FINIT);
 80009ee:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009f6:	4b5f      	ldr	r3, [pc, #380]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0201 	orr.w	r2, r2, #1
 80009fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		//DE-ACTIVATE THE FILTER BANK
		CLEAR_BIT(CAN_INSTANCE->FA1R,filterIndexMsk);
 8000a02:	4b5c      	ldr	r3, [pc, #368]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43da      	mvns	r2, r3
 8000a0e:	4b59      	ldr	r3, [pc, #356]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	400a      	ands	r2, r1
 8000a14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		/*****************************************************************************/
		//SET FILTER MODE
		if(FRAMEX_CONFIG->filterxMode==MSK_MODE)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10b      	bne.n	8000a38 <HAL_CAN_FILTER_CONFIG+0x68>
		{
			CLEAR_BIT(CAN_INSTANCE->FM1R,filterIndexMsk);
 8000a20:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	400a      	ands	r2, r1
 8000a32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a36:	e00d      	b.n	8000a54 <HAL_CAN_FILTER_CONFIG+0x84>
		}
		else if(FRAMEX_CONFIG->filterxMode==ID_MODE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d109      	bne.n	8000a54 <HAL_CAN_FILTER_CONFIG+0x84>
		{
			SET_BIT(CAN_INSTANCE->FM1R,filterIndexMsk);
 8000a40:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			//parameter ERROR
		}
		/*****************************************************************************/
		//SET FILTER SCALE

		if(FRAMEX_CONFIG->filterxScale==DUAL_16)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d128      	bne.n	8000aae <HAL_CAN_FILTER_CONFIG+0xde>
		{	//shift by HIGH<<5 in case of STD_ID
			//shift by
			CLEAR_BIT(CAN_INSTANCE->FS1R,filterIndexMsk);
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	43da      	mvns	r2, r3
 8000a68:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	400a      	ands	r2, r1
 8000a6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			//assign mask or identifier code based on your assigned FILTRATION MODE
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR1=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_LOW&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_LOW&0X0000FFFF);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	0419      	lsls	r1, r3, #16
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	891b      	ldrh	r3, [r3, #8]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68d2      	ldr	r2, [r2, #12]
 8000a86:	4301      	orrs	r1, r0
 8000a88:	3248      	adds	r2, #72	; 0x48
 8000a8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR2=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_HIGH&0X0000FFFF);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	88db      	ldrh	r3, [r3, #6]
 8000a92:	041a      	lsls	r2, r3, #16
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	895b      	ldrh	r3, [r3, #10]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a9c:	6819      	ldr	r1, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	4302      	orrs	r2, r0
 8000aa4:	3348      	adds	r3, #72	; 0x48
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	440b      	add	r3, r1
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	e02a      	b.n	8000b04 <HAL_CAN_FILTER_CONFIG+0x134>

		}
		else if(FRAMEX_CONFIG->filterxScale==SINGLE_32)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d126      	bne.n	8000b04 <HAL_CAN_FILTER_CONFIG+0x134>
		{	//shift by HIGH<<5 in case of STD_ID
			//shift by LOW<<3 in case of EXT_ID
			SET_BIT(CAN_INSTANCE->FS1R,filterIndexMsk);
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			//assign mask or identifier code based on your assigned FILTRATION MODE
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR1=(((uint32_t)FRAMEX_CONFIG->MSG_ID_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_LOW&0X0000FFFF);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	895b      	ldrh	r3, [r3, #10]
 8000ace:	0419      	lsls	r1, r3, #16
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	891b      	ldrh	r3, [r3, #8]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68d2      	ldr	r2, [r2, #12]
 8000ade:	4301      	orrs	r1, r0
 8000ae0:	3248      	adds	r2, #72	; 0x48
 8000ae2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR2=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_LOW&0X0000FFFF);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	88db      	ldrh	r3, [r3, #6]
 8000aea:	041a      	lsls	r2, r3, #16
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	889b      	ldrh	r3, [r3, #4]
 8000af0:	4618      	mov	r0, r3
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	4302      	orrs	r2, r0
 8000afc:	3348      	adds	r3, #72	; 0x48
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	605a      	str	r2, [r3, #4]
		{
			//param ERROR
		}
		/******************************************************************************/
		//FILTER BANK FIFO ASSIGNATION
		if(FRAMEX_CONFIG->filterxAssign==FIFO0)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10b      	bne.n	8000b24 <HAL_CAN_FILTER_CONFIG+0x154>
		{
			CLEAR_BIT(CAN_INSTANCE->FFA1R,filterIndexMsk);
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43da      	mvns	r2, r3
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b22:	e00d      	b.n	8000b40 <HAL_CAN_FILTER_CONFIG+0x170>
		}
		else if(FRAMEX_CONFIG->filterxAssign==FIFO1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	789b      	ldrb	r3, [r3, #2]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d109      	bne.n	8000b40 <HAL_CAN_FILTER_CONFIG+0x170>
		{
			SET_BIT(CAN_INSTANCE->FFA1R,filterIndexMsk);
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		{
			//param ERROR
		}
		/*******************************************************************************/
		//FILTER ACTIVATION
		SET_BIT(CAN_INSTANCE->FA1R,filterIndexMsk);
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		//CLEAR FINIT TO EXIT FILTER INIT MODE
		CLEAR_BIT(CAN_INSTANCE->FMR,CAN_FMR_FINIT);
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0201 	bic.w	r2, r2, #1
 8000b64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	else
	{
		//parameter ERROR
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20000004 	.word	0x20000004

08000b78 <HAL_CAN_psRXFRAME>:

void HAL_CAN_psRXFRAME(S_CAN_RXFRAME* RX_FRAME, uint8_t DATA[],E_FILTER_ASSIGN RX_FIFO)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	71fb      	strb	r3, [r7, #7]

	RX_FRAME->ID_TYPE=(CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_IDE;
 8000b86:	4b6a      	ldr	r3, [pc, #424]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	331b      	adds	r3, #27
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	4413      	add	r3, r2
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	701a      	strb	r2, [r3, #0]
	/*****************************************************************************************/
	if(RX_FRAME->ID_TYPE==STD_ID)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10c      	bne.n	8000bc2 <HAL_CAN_psRXFRAME+0x4a>
	{
		RX_FRAME->StdId=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_STID)>>CAN_RI0R_STID_Pos;
 8000ba8:	4b61      	ldr	r3, [pc, #388]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	331b      	adds	r3, #27
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	4413      	add	r3, r2
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	0d5b      	lsrs	r3, r3, #21
 8000bb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	e00f      	b.n	8000be2 <HAL_CAN_psRXFRAME+0x6a>
	}
	else if(RX_FRAME->ID_TYPE==EXT_ID)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d10b      	bne.n	8000be2 <HAL_CAN_psRXFRAME+0x6a>
	{
		RX_FRAME->ExtId=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_EXID)>>CAN_RI0R_EXID_Pos;
 8000bca:	4b59      	ldr	r3, [pc, #356]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	331b      	adds	r3, #27
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4413      	add	r3, r2
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	609a      	str	r2, [r3, #8]
	{
		//parameter ERROR
	}
	/****************************************************************************************/

	RX_FRAME->RTR=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_RTR)>>CAN_RI0R_RTR_Pos;
 8000be2:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	331b      	adds	r3, #27
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	f003 0201 	and.w	r2, r3, #1
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	60da      	str	r2, [r3, #12]

	/****************************************************************************************/

	RX_FRAME->DLC=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDTR)&CAN_RDT0R_DLC)>>CAN_RDT0R_DLC_Pos;
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	331b      	adds	r3, #27
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	3304      	adds	r3, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 020f 	and.w	r2, r3, #15
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	611a      	str	r2, [r3, #16]

	/****************************************************************************************/

	RX_FRAME->FILTER_BANK_INDEX=(((CAN_INSTANCE->sFIFOMailBox[RX_FIFO]).RDTR)&CAN_RDT0R_FMI)>>CAN_RDT0R_FMI_Pos;
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	331b      	adds	r3, #27
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	0a1b      	lsrs	r3, r3, #8
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	615a      	str	r2, [r3, #20]

	/*****************************************************************************************/

	DATA[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c2a:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	4413      	add	r3, r2
 8000c34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	701a      	strb	r2, [r3, #0]
	DATA[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	4413      	add	r3, r2
 8000c4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	0a1a      	lsrs	r2, r3, #8
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3301      	adds	r3, #1
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]
    DATA[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c5a:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	4413      	add	r3, r2
 8000c64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0c1a      	lsrs	r2, r3, #16
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	701a      	strb	r2, [r3, #0]
    DATA[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c74:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0e1a      	lsrs	r2, r3, #24
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3303      	adds	r3, #3
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	701a      	strb	r2, [r3, #0]
    DATA[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	701a      	strb	r2, [r3, #0]
    DATA[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	4413      	add	r3, r2
 8000cb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	0a1a      	lsrs	r2, r3, #8
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	3305      	adds	r3, #5
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	701a      	strb	r2, [r3, #0]
    DATA[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	0c1a      	lsrs	r2, r3, #16
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3306      	adds	r3, #6
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	701a      	strb	r2, [r3, #0]
    DATA[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	0e1a      	lsrs	r2, r3, #24
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3307      	adds	r3, #7
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	701a      	strb	r2, [r3, #0]

    /******************************************************************************************/

    if(RX_FIFO==FIFO0)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d108      	bne.n	8000d0c <HAL_CAN_psRXFRAME+0x194>
    {
    	SET_BIT(CAN_INSTANCE->RF0R, CAN_RF0R_RFOM0);
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f042 0220 	orr.w	r2, r2, #32
 8000d08:	60da      	str	r2, [r3, #12]
    }
    else
    {
    	//parameter ERROR
    }
}
 8000d0a:	e00a      	b.n	8000d22 <HAL_CAN_psRXFRAME+0x1aa>
    else if(RX_FIFO==FIFO1)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d107      	bne.n	8000d22 <HAL_CAN_psRXFRAME+0x1aa>
    	SET_BIT(CAN_INSTANCE->RF1R, CAN_RF1R_RFOM1);
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_CAN_psRXFRAME+0x1b8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f042 0220 	orr.w	r2, r2, #32
 8000d20:	611a      	str	r2, [r3, #16]
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_CAN_RX_FRAMES_NUM>:

void HAL_CAN_RX_FRAMES_NUM(E_FILTER_ASSIGN RX_FIFO,uint8_t* FRAMES_NUM)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
	FRAMES_NUM=0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
	if(RX_FIFO==FIFO0)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d106      	bne.n	8000d58 <HAL_CAN_RX_FRAMES_NUM+0x24>
	{
		FRAMES_NUM = CAN_INSTANCE->RF0R & CAN_RF0R_FMP0;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_CAN_RX_FRAMES_NUM+0x44>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	603b      	str	r3, [r7, #0]
	}
	else
	{
		//parameter ERROR
	}
}
 8000d56:	e008      	b.n	8000d6a <HAL_CAN_RX_FRAMES_NUM+0x36>
	else if(RX_FIFO==FIFO1)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d105      	bne.n	8000d6a <HAL_CAN_RX_FRAMES_NUM+0x36>
		FRAMES_NUM = CAN_INSTANCE->RF1R & CAN_RF1R_FMP1;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_CAN_RX_FRAMES_NUM+0x44>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	603b      	str	r3, [r7, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000004 	.word	0x20000004

08000d7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x28>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x28>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f90d 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	200f      	movs	r0, #15
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fafa 	bl	8000390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f917 	bl	8000ffa <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f8ed 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	2000002c 	.word	0x2000002c

08000e30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000002c 	.word	0x2000002c

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff47 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff5c 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffb0 	bl	8000f68 <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e14e      	b.n	80012c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8140 	beq.w	80012bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	f003 0201 	and.w	r2, r3, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d017      	beq.n	80010f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 809a 	beq.w	80012bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b55      	ldr	r3, [pc, #340]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a54      	ldr	r2, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b52      	ldr	r3, [pc, #328]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x1e0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a46      	ldr	r2, [pc, #280]	; (80012e8 <HAL_GPIO_Init+0x2d4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a45      	ldr	r2, [pc, #276]	; (80012ec <HAL_GPIO_Init+0x2d8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1d8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1d4>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011e8:	2305      	movs	r3, #5
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011f4:	2300      	movs	r3, #0
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001206:	4937      	ldr	r1, [pc, #220]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001238:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001262:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x2e0>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f aea9 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800
 80012f0:	48000c00 	.word	0x48000c00
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e002      	b.n	800131c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800132e:	af00      	add	r7, sp, #0
 8001330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001338:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	f001 b823 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 817d 	beq.w	800165e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001364:	4bbc      	ldr	r3, [pc, #752]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b04      	cmp	r3, #4
 800136e:	d00c      	beq.n	800138a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001370:	4bb9      	ldr	r3, [pc, #740]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	d15c      	bne.n	8001436 <HAL_RCC_OscConfig+0x10e>
 800137c:	4bb6      	ldr	r3, [pc, #728]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d155      	bne.n	8001436 <HAL_RCC_OscConfig+0x10e>
 800138a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800139e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <HAL_RCC_OscConfig+0x94>
 80013b6:	4ba8      	ldr	r3, [pc, #672]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	e015      	b.n	80013e8 <HAL_RCC_OscConfig+0xc0>
 80013bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013e4:	4b9c      	ldr	r3, [pc, #624]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013f4:	fa92 f2a2 	rbit	r2, r2
 80013f8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001400:	fab2 f282 	clz	r2, r2
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	f042 0220 	orr.w	r2, r2, #32
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	f002 021f 	and.w	r2, r2, #31
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 811f 	beq.w	800165c <HAL_RCC_OscConfig+0x334>
 800141e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 8116 	bne.w	800165c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	f000 bfaf 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x12e>
 8001448:	4b83      	ldr	r3, [pc, #524]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a82      	ldr	r2, [pc, #520]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e036      	b.n	80014c4 <HAL_RCC_OscConfig+0x19c>
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x158>
 8001466:	4b7c      	ldr	r3, [pc, #496]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7b      	ldr	r2, [pc, #492]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 800146c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b79      	ldr	r3, [pc, #484]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a78      	ldr	r2, [pc, #480]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 8001478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e021      	b.n	80014c4 <HAL_RCC_OscConfig+0x19c>
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x184>
 8001492:	4b71      	ldr	r3, [pc, #452]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a70      	ldr	r2, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6d      	ldr	r2, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0x19c>
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a66      	ldr	r2, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	f023 020f 	bic.w	r2, r3, #15
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	495f      	ldr	r1, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d059      	beq.n	80015a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc9f 	bl	8000e30 <HAL_GetTick>
 80014f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e00a      	b.n	800150e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fc9a 	bl	8000e30 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b64      	cmp	r3, #100	; 0x64
 8001506:	d902      	bls.n	800150e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	f000 bf43 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
 800150e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001512:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001522:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	095b      	lsrs	r3, r3, #5
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0x218>
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	e015      	b.n	800156c <HAL_RCC_OscConfig+0x244>
 8001540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001544:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001558:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800155c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001570:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001574:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001578:	fa92 f2a2 	rbit	r2, r2
 800157c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001580:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001584:	fab2 f282 	clz	r2, r2
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f002 021f 	and.w	r2, r2, #31
 8001594:	2101      	movs	r1, #1
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ab      	beq.n	80014f8 <HAL_RCC_OscConfig+0x1d0>
 80015a0:	e05d      	b.n	800165e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc45 	bl	8000e30 <HAL_GetTick>
 80015a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fc40 	bl	8000e30 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d902      	bls.n	80015c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	f000 bee9 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
 80015c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	095b      	lsrs	r3, r3, #5
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2cc>
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e015      	b.n	8001620 <HAL_RCC_OscConfig+0x2f8>
 80015f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001610:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_RCC_OscConfig+0x330>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001624:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001628:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800162c:	fa92 f2a2 	rbit	r2, r2
 8001630:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001634:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001638:	fab2 f282 	clz	r2, r2
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f042 0220 	orr.w	r2, r2, #32
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f002 021f 	and.w	r2, r2, #31
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ab      	bne.n	80015ac <HAL_RCC_OscConfig+0x284>
 8001654:	e003      	b.n	800165e <HAL_RCC_OscConfig+0x336>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 817d 	beq.w	800196e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001674:	4ba6      	ldr	r3, [pc, #664]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00b      	beq.n	8001698 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001680:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d172      	bne.n	8001772 <HAL_RCC_OscConfig+0x44a>
 800168c:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d16c      	bne.n	8001772 <HAL_RCC_OscConfig+0x44a>
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	095b      	lsrs	r3, r3, #5
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d102      	bne.n	80016c8 <HAL_RCC_OscConfig+0x3a0>
 80016c2:	4b93      	ldr	r3, [pc, #588]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	e013      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c8>
 80016c8:	2302      	movs	r3, #2
 80016ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016ec:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2202      	movs	r2, #2
 80016f2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016fa:	fa92 f2a2 	rbit	r2, r2
 80016fe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001702:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001706:	fab2 f282 	clz	r2, r2
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	f042 0220 	orr.w	r2, r2, #32
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f002 021f 	and.w	r2, r2, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00a      	beq.n	8001738 <HAL_RCC_OscConfig+0x410>
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d002      	beq.n	8001738 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	f000 be2e 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b75      	ldr	r3, [pc, #468]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	21f8      	movs	r1, #248	; 0xf8
 800174e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001756:	fa91 f1a1 	rbit	r1, r1
 800175a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800175e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001762:	fab1 f181 	clz	r1, r1
 8001766:	b2c9      	uxtb	r1, r1
 8001768:	408b      	lsls	r3, r1
 800176a:	4969      	ldr	r1, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001770:	e0fd      	b.n	800196e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8088 	beq.w	8001894 <HAL_RCC_OscConfig+0x56c>
 8001784:	2301      	movs	r3, #1
 8001786:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001796:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	2301      	movs	r3, #1
 80017ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb3e 	bl	8000e30 <HAL_GetTick>
 80017b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fb39 	bl	8000e30 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d902      	bls.n	80017d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	f000 bde2 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d102      	bne.n	8001800 <HAL_RCC_OscConfig+0x4d8>
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	e013      	b.n	8001828 <HAL_RCC_OscConfig+0x500>
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001818:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2202      	movs	r2, #2
 800182a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800182e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001832:	fa92 f2a2 	rbit	r2, r2
 8001836:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800183a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800183e:	fab2 f282 	clz	r2, r2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f002 021f 	and.w	r2, r2, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0af      	beq.n	80017ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	21f8      	movs	r1, #248	; 0xf8
 8001870:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001878:	fa91 f1a1 	rbit	r1, r1
 800187c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001880:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001884:	fab1 f181 	clz	r1, r1
 8001888:	b2c9      	uxtb	r1, r1
 800188a:	408b      	lsls	r3, r1
 800188c:	4920      	ldr	r1, [pc, #128]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
 8001892:	e06c      	b.n	800196e <HAL_RCC_OscConfig+0x646>
 8001894:	2301      	movs	r3, #1
 8001896:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	461a      	mov	r2, r3
 80018bc:	2300      	movs	r3, #0
 80018be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fab6 	bl	8000e30 <HAL_GetTick>
 80018c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fab1 	bl	8000e30 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d902      	bls.n	80018e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	f000 bd5a 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d104      	bne.n	8001914 <HAL_RCC_OscConfig+0x5ec>
 800190a:	4b01      	ldr	r3, [pc, #4]	; (8001910 <HAL_RCC_OscConfig+0x5e8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	e015      	b.n	800193c <HAL_RCC_OscConfig+0x614>
 8001910:	40021000 	.word	0x40021000
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001926:	2302      	movs	r3, #2
 8001928:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800192c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001938:	4bc8      	ldr	r3, [pc, #800]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2202      	movs	r2, #2
 800193e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001942:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001946:	fa92 f2a2 	rbit	r2, r2
 800194a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800194e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001952:	fab2 f282 	clz	r2, r2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f002 021f 	and.w	r2, r2, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ad      	bne.n	80018ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8110 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d079      	beq.n	8001a88 <HAL_RCC_OscConfig+0x760>
 8001994:	2301      	movs	r3, #1
 8001996:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4bab      	ldr	r3, [pc, #684]	; (8001c60 <HAL_RCC_OscConfig+0x938>)
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	461a      	mov	r2, r3
 80019ba:	2301      	movs	r3, #1
 80019bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fa37 	bl	8000e30 <HAL_GetTick>
 80019c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fa32 	bl	8000e30 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d902      	bls.n	80019de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	f000 bcdb 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019f8:	2202      	movs	r2, #2
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a38:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a44:	2102      	movs	r1, #2
 8001a46:	6019      	str	r1, [r3, #0]
 8001a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	fa93 f1a3 	rbit	r1, r3
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a5e:	6019      	str	r1, [r3, #0]
  return result;
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0a0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x6a0>
 8001a86:	e08d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x87c>
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001aaa:	601a      	str	r2, [r3, #0]
  return result;
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ab4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x938>)
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7ff f9b1 	bl	8000e30 <HAL_GetTick>
 8001ace:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f9ac 	bl	8000e30 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d902      	bls.n	8001aea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	f000 bc55 	b.w	8002394 <HAL_RCC_OscConfig+0x106c>
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001af2:	2202      	movs	r2, #2
 8001af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b16:	2202      	movs	r2, #2
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b62:	2102      	movs	r1, #2
 8001b64:	6019      	str	r1, [r3, #0]
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f1a3 	rbit	r1, r3
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b7c:	6019      	str	r1, [r3, #0]
  return result;
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d197      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 81a1 	beq.w	8001efc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d116      	bne.n	8001bfa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	61d3      	str	r3, [r2, #28]
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bf2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_RCC_OscConfig+0x93c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d11a      	bne.n	8001c3c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_RCC_OscConfig+0x93c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_RCC_OscConfig+0x93c>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f90d 	bl	8000e30 <HAL_GetTick>
 8001c16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1c:	f7ff f908 	bl	8000e30 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b64      	cmp	r3, #100	; 0x64
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e3b1      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_RCC_OscConfig+0x93c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ef      	beq.n	8001c1c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10d      	bne.n	8001c68 <HAL_RCC_OscConfig+0x940>
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a02      	ldr	r2, [pc, #8]	; (8001c5c <HAL_RCC_OscConfig+0x934>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e03c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x9ac>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	10908120 	.word	0x10908120
 8001c64:	40007000 	.word	0x40007000
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x96a>
 8001c78:	4bc1      	ldr	r3, [pc, #772]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4ac0      	ldr	r2, [pc, #768]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	4bbe      	ldr	r3, [pc, #760]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4abd      	ldr	r2, [pc, #756]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	e020      	b.n	8001cd4 <HAL_RCC_OscConfig+0x9ac>
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x994>
 8001ca2:	4bb7      	ldr	r3, [pc, #732]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4ab6      	ldr	r2, [pc, #728]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4bb4      	ldr	r3, [pc, #720]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4ab3      	ldr	r2, [pc, #716]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x9ac>
 8001cbc:	4bb0      	ldr	r3, [pc, #704]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4aaf      	ldr	r2, [pc, #700]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	4bad      	ldr	r3, [pc, #692]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4aac      	ldr	r2, [pc, #688]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001cce:	f023 0304 	bic.w	r3, r3, #4
 8001cd2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8081 	beq.w	8001de8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f8a3 	bl	8000e30 <HAL_GetTick>
 8001cea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f89e 	bl	8000e30 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e345      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d10:	2202      	movs	r2, #2
 8001d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d34:	2202      	movs	r2, #2
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d4e:	601a      	str	r2, [r3, #0]
  return result;
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_OscConfig+0xa4c>
 8001d6e:	4b84      	ldr	r3, [pc, #528]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	e013      	b.n	8001d9c <HAL_RCC_OscConfig+0xa74>
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	4b79      	ldr	r3, [pc, #484]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001da4:	2102      	movs	r1, #2
 8001da6:	6011      	str	r1, [r2, #0]
 8001da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	fa92 f1a2 	rbit	r1, r2
 8001db6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dbe:	6011      	str	r1, [r2, #0]
  return result;
 8001dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	fab2 f282 	clz	r2, r2
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f002 021f 	and.w	r2, r2, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d084      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x9c8>
 8001de6:	e07f      	b.n	8001ee8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff f822 	bl	8000e30 <HAL_GetTick>
 8001dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	e00b      	b.n	8001e0a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff f81d 	bl	8000e30 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e2c4      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e36:	2202      	movs	r2, #2
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e50:	601a      	str	r2, [r3, #0]
  return result;
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d102      	bne.n	8001e76 <HAL_RCC_OscConfig+0xb4e>
 8001e70:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	e013      	b.n	8001e9e <HAL_RCC_OscConfig+0xb76>
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e7e:	2202      	movs	r2, #2
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e86:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	6011      	str	r1, [r2, #0]
 8001eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	fa92 f1a2 	rbit	r1, r2
 8001eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ebc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ec0:	6011      	str	r1, [r2, #0]
  return result;
 8001ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f002 021f 	and.w	r2, r2, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d184      	bne.n	8001df2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ee8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 8242 	beq.w	8002392 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_RCC_OscConfig+0xc58>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	f000 8213 	beq.w	8002342 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	f040 8162 	bne.w	80021f2 <HAL_RCC_OscConfig+0xeca>
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f52:	601a      	str	r2, [r3, #0]
  return result;
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe ff5c 	bl	8000e30 <HAL_GetTick>
 8001f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	e00c      	b.n	8001f98 <HAL_RCC_OscConfig+0xc70>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe ff54 	bl	8000e30 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1fd      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fbc:	601a      	str	r2, [r3, #0]
  return result;
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d102      	bne.n	8001fe2 <HAL_RCC_OscConfig+0xcba>
 8001fdc:	4bb0      	ldr	r3, [pc, #704]	; (80022a0 <HAL_RCC_OscConfig+0xf78>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	e027      	b.n	8002032 <HAL_RCC_OscConfig+0xd0a>
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fa93 f2a3 	rbit	r2, r3
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002010:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002028:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	4b9c      	ldr	r3, [pc, #624]	; (80022a0 <HAL_RCC_OscConfig+0xf78>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002036:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800203a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800203e:	6011      	str	r1, [r2, #0]
 8002040:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002044:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	fa92 f1a2 	rbit	r1, r2
 800204e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002052:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002056:	6011      	str	r1, [r2, #0]
  return result;
 8002058:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800205c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	fab2 f282 	clz	r2, r2
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f042 0220 	orr.w	r2, r2, #32
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	f002 021f 	and.w	r2, r2, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d182      	bne.n	8001f84 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0xf78>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	430b      	orrs	r3, r1
 80020a0:	497f      	ldr	r1, [pc, #508]	; (80022a0 <HAL_RCC_OscConfig+0xf78>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fa93 f2a3 	rbit	r2, r3
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020ca:	601a      	str	r2, [r3, #0]
  return result;
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	461a      	mov	r2, r3
 80020e8:	2301      	movs	r3, #1
 80020ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe fea0 	bl	8000e30 <HAL_GetTick>
 80020f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	e009      	b.n	800210a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f6:	f7fe fe9b 	bl	8000e30 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e144      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800212e:	601a      	str	r2, [r3, #0]
  return result;
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002138:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0xe2c>
 800214e:	4b54      	ldr	r3, [pc, #336]	; (80022a0 <HAL_RCC_OscConfig+0xf78>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	e027      	b.n	80021a4 <HAL_RCC_OscConfig+0xe7c>
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800215c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0xf78>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	fa92 f1a2 	rbit	r1, r2
 80021c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021c8:	6011      	str	r1, [r2, #0]
  return result;
 80021ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d082      	beq.n	80020f6 <HAL_RCC_OscConfig+0xdce>
 80021f0:	e0cf      	b.n	8002392 <HAL_RCC_OscConfig+0x106a>
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002216:	601a      	str	r2, [r3, #0]
  return result;
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002220:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800222c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	461a      	mov	r2, r3
 8002234:	2300      	movs	r3, #0
 8002236:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fdfa 	bl	8000e30 <HAL_GetTick>
 800223c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	e009      	b.n	8002256 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fdf5 	bl	8000e30 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e09e      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800225e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	fa93 f2a3 	rbit	r2, r3
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800227a:	601a      	str	r2, [r3, #0]
  return result;
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002284:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d104      	bne.n	80022a4 <HAL_RCC_OscConfig+0xf7c>
 800229a:	4b01      	ldr	r3, [pc, #4]	; (80022a0 <HAL_RCC_OscConfig+0xf78>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	e029      	b.n	80022f4 <HAL_RCC_OscConfig+0xfcc>
 80022a0:	40021000 	.word	0x40021000
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_OscConfig+0x1078>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80022fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002300:	6011      	str	r1, [r2, #0]
 8002302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002306:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	fa92 f1a2 	rbit	r1, r2
 8002310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002314:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002318:	6011      	str	r1, [r2, #0]
  return result;
 800231a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800231e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f042 0220 	orr.w	r2, r2, #32
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f002 021f 	and.w	r2, r2, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f202 	lsl.w	r2, r1, r2
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d180      	bne.n	8002242 <HAL_RCC_OscConfig+0xf1a>
 8002340:	e027      	b.n	8002392 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e01e      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCC_OscConfig+0x1078>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800235e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002362:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	429a      	cmp	r2, r3
 8002374:	d10b      	bne.n	800238e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002376:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800237a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b09e      	sub	sp, #120	; 0x78
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e162      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b90      	ldr	r3, [pc, #576]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b8d      	ldr	r3, [pc, #564]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	498b      	ldr	r1, [pc, #556]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b89      	ldr	r3, [pc, #548]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e14a      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b82      	ldr	r3, [pc, #520]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	497f      	ldr	r1, [pc, #508]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80dc 	beq.w	80025d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d13c      	bne.n	800249a <HAL_RCC_ClockConfig+0xf6>
 8002420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002424:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800242e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_RCC_ClockConfig+0xa6>
 8002444:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	e00f      	b.n	800246a <HAL_RCC_ClockConfig+0xc6>
 800244a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	667b      	str	r3, [r7, #100]	; 0x64
 8002458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800245c:	663b      	str	r3, [r7, #96]	; 0x60
 800245e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002466:	4b67      	ldr	r3, [pc, #412]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002472:	fa92 f2a2 	rbit	r2, r2
 8002476:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d17b      	bne.n	800258e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0f3      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d13c      	bne.n	800251c <HAL_RCC_ClockConfig+0x178>
 80024a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_RCC_ClockConfig+0x128>
 80024c6:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	e00f      	b.n	80024ec <HAL_RCC_ClockConfig+0x148>
 80024cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	647b      	str	r3, [r7, #68]	; 0x44
 80024da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
 80024e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e8:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80024f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f4:	fa92 f2a2 	rbit	r2, r2
 80024f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fc:	fab2 f282 	clz	r2, r2
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f042 0220 	orr.w	r2, r2, #32
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	f002 021f 	and.w	r2, r2, #31
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f202 	lsl.w	r2, r1, r2
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d13a      	bne.n	800258e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b2      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
 800251c:	2302      	movs	r3, #2
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_RCC_ClockConfig+0x1a0>
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e00d      	b.n	8002560 <HAL_RCC_ClockConfig+0x1bc>
 8002544:	2302      	movs	r3, #2
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	2302      	movs	r3, #2
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	2202      	movs	r2, #2
 8002562:	61ba      	str	r2, [r7, #24]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	fa92 f2a2 	rbit	r2, r2
 800256a:	617a      	str	r2, [r7, #20]
  return result;
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	fab2 f282 	clz	r2, r2
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e079      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f023 0203 	bic.w	r2, r3, #3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	491a      	ldr	r1, [pc, #104]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fc46 	bl	8000e30 <HAL_GetTick>
 80025a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	e00a      	b.n	80025be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a8:	f7fe fc42 	bl	8000e30 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e061      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_RCC_ClockConfig+0x260>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 020c 	and.w	r2, r3, #12
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1eb      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d214      	bcs.n	8002608 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4906      	ldr	r1, [pc, #24]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_RCC_ClockConfig+0x25c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e040      	b.n	8002682 <HAL_RCC_ClockConfig+0x2de>
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	491a      	ldr	r1, [pc, #104]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4912      	ldr	r1, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002646:	f000 f829 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800264a:	4601      	mov	r1, r0
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_RCC_ClockConfig+0x2e8>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002654:	22f0      	movs	r2, #240	; 0xf0
 8002656:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	60fa      	str	r2, [r7, #12]
  return result;
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	40d3      	lsrs	r3, r2
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x2ec>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	fa21 f303 	lsr.w	r3, r1, r3
 8002672:	4a08      	ldr	r2, [pc, #32]	; (8002694 <HAL_RCC_ClockConfig+0x2f0>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCC_ClockConfig+0x2f4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb94 	bl	8000da8 <HAL_InitTick>
  
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3778      	adds	r7, #120	; 0x78
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	08002814 	.word	0x08002814
 8002694:	20000000 	.word	0x20000000
 8002698:	20000008 	.word	0x20000008

0800269c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b08b      	sub	sp, #44	; 0x2c
 80026a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x30>
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ca:	e03c      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026ce:	623b      	str	r3, [r7, #32]
      break;
 80026d0:	e03c      	b.n	800274c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	fa92 f2a2 	rbit	r2, r2
 80026e4:	607a      	str	r2, [r7, #4]
  return result;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	fab2 f282 	clz	r2, r2
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	40d3      	lsrs	r3, r2
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_RCC_GetSysClockFreq+0xc8>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	220f      	movs	r2, #15
 8002700:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	60fa      	str	r2, [r7, #12]
  return result;
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	fab2 f282 	clz	r2, r2
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	40d3      	lsrs	r3, r2
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	fbb2 f2f3 	udiv	r2, r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	e004      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_RCC_GetSysClockFreq+0xd0>)
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	623b      	str	r3, [r7, #32]
      break;
 8002744:	e002      	b.n	800274c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002748:	623b      	str	r3, [r7, #32]
      break;
 800274a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274c:	6a3b      	ldr	r3, [r7, #32]
}
 800274e:	4618      	mov	r0, r3
 8002750:	372c      	adds	r7, #44	; 0x2c
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	007a1200 	.word	0x007a1200
 8002764:	08002824 	.word	0x08002824
 8002768:	08002834 	.word	0x08002834
 800276c:	003d0900 	.word	0x003d0900

08002770 <memset>:
 8002770:	4402      	add	r2, r0
 8002772:	4603      	mov	r3, r0
 8002774:	4293      	cmp	r3, r2
 8002776:	d100      	bne.n	800277a <memset+0xa>
 8002778:	4770      	bx	lr
 800277a:	f803 1b01 	strb.w	r1, [r3], #1
 800277e:	e7f9      	b.n	8002774 <memset+0x4>

08002780 <__libc_init_array>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	4d0d      	ldr	r5, [pc, #52]	; (80027b8 <__libc_init_array+0x38>)
 8002784:	4c0d      	ldr	r4, [pc, #52]	; (80027bc <__libc_init_array+0x3c>)
 8002786:	1b64      	subs	r4, r4, r5
 8002788:	10a4      	asrs	r4, r4, #2
 800278a:	2600      	movs	r6, #0
 800278c:	42a6      	cmp	r6, r4
 800278e:	d109      	bne.n	80027a4 <__libc_init_array+0x24>
 8002790:	4d0b      	ldr	r5, [pc, #44]	; (80027c0 <__libc_init_array+0x40>)
 8002792:	4c0c      	ldr	r4, [pc, #48]	; (80027c4 <__libc_init_array+0x44>)
 8002794:	f000 f818 	bl	80027c8 <_init>
 8002798:	1b64      	subs	r4, r4, r5
 800279a:	10a4      	asrs	r4, r4, #2
 800279c:	2600      	movs	r6, #0
 800279e:	42a6      	cmp	r6, r4
 80027a0:	d105      	bne.n	80027ae <__libc_init_array+0x2e>
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a8:	4798      	blx	r3
 80027aa:	3601      	adds	r6, #1
 80027ac:	e7ee      	b.n	800278c <__libc_init_array+0xc>
 80027ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b2:	4798      	blx	r3
 80027b4:	3601      	adds	r6, #1
 80027b6:	e7f2      	b.n	800279e <__libc_init_array+0x1e>
 80027b8:	08002844 	.word	0x08002844
 80027bc:	08002844 	.word	0x08002844
 80027c0:	08002844 	.word	0x08002844
 80027c4:	08002848 	.word	0x08002848

080027c8 <_init>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr

080027d4 <_fini>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr
