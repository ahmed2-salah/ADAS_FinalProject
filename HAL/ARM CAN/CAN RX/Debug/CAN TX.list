
CAN TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002090  08002090  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002090  08002090  00012090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002098  08002098  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080020a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  080020b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080020b0  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004f35  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001314  00000000  00000000  00024fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  000262d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c8  00000000  00000000  00026800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ffb9  00000000  00000000  00026bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000070d0  00000000  00000000  00046b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c212d  00000000  00000000  0004dc51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001328  00000000  00000000  0010fd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001110a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800204c 	.word	0x0800204c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	0800204c 	.word	0x0800204c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b091      	sub	sp, #68	; 0x44
 8000504:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fd1d 	bl	8000f44 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f883 	bl	8000614 <SystemClock_Config>

  /* Initialize all configured peripherals */
  //CONFIGURE THE LED ON GPIOA PIN 5
  MX_GPIO_Init();
 800050e:	f000 f8e1 	bl	80006d4 <MX_GPIO_Init>
  MX_GPIOBG_Init();
 8000512:	f000 f945 	bl	80007a0 <MX_GPIOBG_Init>
  MX_GPIOBY_Init();
 8000516:	f000 f90f 	bl	8000738 <MX_GPIOBY_Init>
  /* Enable CAN clock*/
  HAL_CAN_MspInit();
 800051a:	f000 f9a1 	bl	8000860 <HAL_CAN_MspInit>

  S_CAN_INIT_CONFIG initConfig={LOOPBACK_SILENT_MODE,ENABLE,DISABLE,DISABLE,ENABLE,DISABLE};
 800051e:	4a39      	ldr	r2, [pc, #228]	; (8000604 <main+0x104>)
 8000520:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	6018      	str	r0, [r3, #0]
 800052a:	3304      	adds	r3, #4
 800052c:	8019      	strh	r1, [r3, #0]

  S_CAN_BITIME_CONFIG bitime={PRESCALER_32,TS1_Q,TS2_Q};
 800052e:	4b36      	ldr	r3, [pc, #216]	; (8000608 <main+0x108>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	637b      	str	r3, [r7, #52]	; 0x34

  s_filterxConfig FILTERX_CONFIG={MSK_MODE,SINGLE_32,FIFO0,ENABLE,0X0000,0X123<<5,0X0000,0X123<<5,10};
 8000534:	4b35      	ldr	r3, [pc, #212]	; (800060c <main+0x10c>)
 8000536:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800053a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t DATA_TX[8]={'H','E','L','L','O','.','.','.'};
    uint8_t MAILBOX_CODE;*/


  /*initialize the can */
    HAL_CAN_vInit(&initConfig,&bitime);
 8000540:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000544:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fa9c 	bl	8000a88 <HAL_CAN_vInit>
  /*set debuging mode (loopback)*/
  //HAL_CAN_vDebugMode(&initConfig);


  /*set RX filter configuration*/
    HAL_CAN_FILTER_CONFIG(&FILTERX_CONFIG);
 8000550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fb19 	bl	8000b8c <HAL_CAN_FILTER_CONFIG>

    /*enter the normal mode and acquire an access on the CAN bus */
    HAL_CAN_start();
 800055a:	f000 fb0f 	bl	8000b7c <HAL_CAN_start>
  	  HAL_CAN_u8IS_TXFRAME_PENDING(&status,MAILBOX_CODE);
    }
    while(status==1);*/

    S_CAN_RXFRAME RX_FRAME;
    uint8_t DATA_RX[8]={0};
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
    uint8_t FRAMES_NUM=0;
 8000566:	2300      	movs	r3, #0
 8000568:	70fb      	strb	r3, [r7, #3]
    //uint8_t FRAMES0_NUM=0;
   do
   {  //wait until FIFO0 no longer carry frames
	   HAL_CAN_RX_FRAMES_NUM(FIFO0,&FRAMES_NUM);
 800056a:	1cfb      	adds	r3, r7, #3
 800056c:	4619      	mov	r1, r3
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fcbe 	bl	8000ef0 <HAL_CAN_RX_FRAMES_NUM>
	 //HAL_CAN_RX_FRAMES_NUM(FIFO0,&FRAMES0_NUM);
	   while(FRAMES_NUM==0)
 8000574:	e004      	b.n	8000580 <main+0x80>
	   {
		   HAL_CAN_RX_FRAMES_NUM(FIFO0,&FRAMES_NUM);
 8000576:	1cfb      	adds	r3, r7, #3
 8000578:	4619      	mov	r1, r3
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fcb8 	bl	8000ef0 <HAL_CAN_RX_FRAMES_NUM>
	   while(FRAMES_NUM==0)
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f7      	beq.n	8000576 <main+0x76>
	   }


	 //receive the data in FIFO0 queue
  	 HAL_CAN_psRXFRAME(&RX_FRAME, DATA_RX,FIFO0);
 8000586:	1d39      	adds	r1, r7, #4
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fbd0 	bl	8000d34 <HAL_CAN_psRXFRAME>
	 HAL_CAN_RX_FRAMES_NUM(FIFO0,&FRAMES_NUM);
 8000594:	1cfb      	adds	r3, r7, #3
 8000596:	4619      	mov	r1, r3
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fca9 	bl	8000ef0 <HAL_CAN_RX_FRAMES_NUM>
   }while((FRAMES_NUM!=0));
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1e2      	bne.n	800056a <main+0x6a>


   while((DATA_RX[1]=='Y'))
 80005a4:	e013      	b.n	80005ce <main+0xce>
   {
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <main+0x110>)
 80005ae:	f000 ffd9 	bl	8001564 <HAL_GPIO_WritePin>
	   //HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
	   HAL_Delay(1000);
 80005b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b6:	f000 fd37 	bl	8001028 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <main+0x110>)
 80005c2:	f000 ffcf 	bl	8001564 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 80005c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ca:	f000 fd2d 	bl	8001028 <HAL_Delay>
   while((DATA_RX[1]=='Y'))
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	2b59      	cmp	r3, #89	; 0x59
 80005d2:	d0e8      	beq.n	80005a6 <main+0xa6>
   }
   while((DATA_RX[1]=='G'))
 80005d4:	e011      	b.n	80005fa <main+0xfa>
   {
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2104      	movs	r1, #4
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <main+0x110>)
 80005dc:	f000 ffc2 	bl	8001564 <HAL_GPIO_WritePin>
	   //HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
	   HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f000 fd20 	bl	8001028 <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2104      	movs	r1, #4
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x110>)
 80005ee:	f000 ffb9 	bl	8001564 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f000 fd17 	bl	8001028 <HAL_Delay>
   while((DATA_RX[1]=='G'))
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	2b47      	cmp	r3, #71	; 0x47
 80005fe:	d0ea      	beq.n	80005d6 <main+0xd6>
   }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x100>
 8000602:	bf00      	nop
 8000604:	08002064 	.word	0x08002064
 8000608:	0800206c 	.word	0x0800206c
 800060c:	08002070 	.word	0x08002070
 8000610:	40020400 	.word	0x40020400

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2234      	movs	r2, #52	; 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fce6 	bl	8001ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xb8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xb8>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <SystemClock_Config+0xbc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <SystemClock_Config+0xbc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <SystemClock_Config+0xbc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fa15 	bl	8001ab8 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000694:	f000 f8b6 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff70 	bl	8001598 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006be:	f000 f8a1 	bl	8000804 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_GPIO_Init+0x5c>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MX_GPIO_Init+0x5c>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_GPIO_Init+0x5c>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2120      	movs	r1, #32
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <MX_GPIO_Init+0x60>)
 800070a:	f000 ff2b 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800070e:	2320      	movs	r3, #32
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0x60>)
 8000724:	f000 fd8a 	bl	800123c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000

08000738 <MX_GPIOBY_Init>:
static void MX_GPIOBY_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_GPIOBY_Init+0x60>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4a10      	ldr	r2, [pc, #64]	; (8000798 <MX_GPIOBY_Init+0x60>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6313      	str	r3, [r2, #48]	; 0x30
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_GPIOBY_Init+0x60>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIOBY_Init+0x64>)
 8000770:	f000 fef8 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIOBY_Init+0x64>)
 800078c:	f000 fd56 	bl	800123c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <MX_GPIOBG_Init>:
static void MX_GPIOBG_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_GPIOBG_Init+0x5c>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_GPIOBG_Init+0x5c>)
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_GPIOBG_Init+0x5c>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <MX_GPIOBG_Init+0x60>)
 80007d6:	f000 fec5 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007da:	2304      	movs	r3, #4
 80007dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIOBG_Init+0x60>)
 80007f0:	f000 fd24 	bl	800123c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020400 	.word	0x40020400

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
  {*/
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_CAN_MspInit+0x78>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <HAL_CAN_MspInit+0x78>)
 8000880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_CAN_MspInit+0x78>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_CAN_MspInit+0x78>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_CAN_MspInit+0x78>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_CAN_MspInit+0x78>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008c0:	2309      	movs	r3, #9
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <HAL_CAN_MspInit+0x7c>)
 80008cc:	f000 fcb6 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
 // }

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 fb5c 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f001 fb3d 	bl	8002004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fdb9 	bl	8000500 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800099c:	080020a0 	.word	0x080020a0
  ldr r2, =_sbss
 80009a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009a4:	20000030 	.word	0x20000030

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_CAN_LEAVE_SLEEP_MODE>:
}



void HAL_CAN_LEAVE_SLEEP_MODE(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_SLEEP);
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f022 0202 	bic.w	r2, r2, #2
 80009be:	601a      	str	r2, [r3, #0]
	while((READ_BIT(CAN_INSTANCE->MSR,CAN_MSR_SLAK)>>CAN_MSR_SLAK_Pos)==HIGH);
 80009c0:	bf00      	nop
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d0f7      	beq.n	80009c2 <HAL_CAN_LEAVE_SLEEP_MODE+0x16>
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_CAN_ENTER_INIT_MODE>:



void HAL_CAN_ENTER_INIT_MODE(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

	//for software initialization
	SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//SET INREQ BIT
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0201 	orr.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG RAISING
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK_Pos)==LOW);
 80009f8:	bf00      	nop
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f8      	beq.n	80009fa <HAL_CAN_ENTER_INIT_MODE+0x16>
	//LEAVE SLEEP MODE
	HAL_CAN_LEAVE_SLEEP_MODE();
 8000a08:	f7ff ffd0 	bl	80009ac <HAL_CAN_LEAVE_SLEEP_MODE>

	//ALL MASSAGES TO AND FROM THE CAN BUS ARE STOPPED
	//OUTPUT OF CANTX=1	RECESSIVE
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_CAN_LEAVE_INIT_MODE>:



void HAL_CAN_LEAVE_INIT_MODE(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//CLEAR INREQ BIT
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f022 0201 	bic.w	r2, r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG TO FALL
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK_Pos)==HIGH);
 8000a28:	bf00      	nop
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d0f8      	beq.n	8000a2a <HAL_CAN_LEAVE_INIT_MODE+0x16>
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_CAN_vsetbiTime>:



void HAL_CAN_vsetbiTime(S_CAN_BITIME_CONFIG* bitime)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	//HAL_CAN_ENTER_INIT_MODE();
	WRITE_REG(CAN_INSTANCE->BTR,((CAN_INSTANCE->BTR&0XFF000000)|(uint32_t)(bitime->prescaler<<CAN_BTR_BRP_Pos)|(uint32_t)(bitime->TS1_Qunata<<CAN_BTR_TS1_Pos)|(uint32_t)(bitime->TS2_Qunata<<CAN_BTR_TS2_Pos)));
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_CAN_vsetbiTime+0x3c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	8812      	ldrh	r2, [r2, #0]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7892      	ldrb	r2, [r2, #2]
 8000a64:	0412      	lsls	r2, r2, #16
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	051b      	lsls	r3, r3, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_CAN_vsetbiTime+0x3c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	61da      	str	r2, [r3, #28]
};
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_CAN_vInit>:
				break;
		}
}

void HAL_CAN_vInit(S_CAN_INIT_CONFIG* initConfig,S_CAN_BITIME_CONFIG* bitime)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	HAL_CAN_ENTER_INIT_MODE();
 8000a92:	f7ff ffa7 	bl	80009e4 <HAL_CAN_ENTER_INIT_MODE>
/**************************************************************/
	if(!initConfig->IDENTIFIER_PRIORITY)//FIFO Priority
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	789b      	ldrb	r3, [r3, #2]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d108      	bne.n	8000ab0 <HAL_CAN_vInit+0x28>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f042 0204 	orr.w	r2, r2, #4
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	e007      	b.n	8000ac0 <HAL_CAN_vInit+0x38>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0204 	bic.w	r2, r2, #4
 8000abe:	601a      	str	r2, [r3, #0]
	}
/**************************************************************/

	if(!initConfig->AUTO_RETRANSMISSION)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d108      	bne.n	8000ada <HAL_CAN_vInit+0x52>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f042 0210 	orr.w	r2, r2, #16
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e007      	b.n	8000aea <HAL_CAN_vInit+0x62>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 0210 	bic.w	r2, r2, #16
 8000ae8:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->AUTO_BUSOFF_RECOVERY)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	78db      	ldrb	r3, [r3, #3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d008      	beq.n	8000b04 <HAL_CAN_vInit+0x7c>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	e007      	b.n	8000b14 <HAL_CAN_vInit+0x8c>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b12:	601a      	str	r2, [r3, #0]
	}
/************************************************************/
	if(initConfig->AUTO_WAKEUP_MODE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d008      	beq.n	8000b2e <HAL_CAN_vInit+0xa6>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0220 	orr.w	r2, r2, #32
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_CAN_vInit+0xb6>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0220 	bic.w	r2, r2, #32
 8000b3c:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->TIME_TRIG_COM==ENABLE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	795b      	ldrb	r3, [r3, #5]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d108      	bne.n	8000b58 <HAL_CAN_vInit+0xd0>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_CAN_vInit+0xe0>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_CAN_vInit+0xf0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b66:	601a      	str	r2, [r3, #0]
	}
	HAL_CAN_vsetbiTime(bitime);
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f7ff ff6d 	bl	8000a48 <HAL_CAN_vsetbiTime>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_CAN_start>:

void HAL_CAN_start(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	//ENTER THE NORMAL MODE
	HAL_CAN_LEAVE_INIT_MODE();
 8000b80:	f7ff ff48 	bl	8000a14 <HAL_CAN_LEAVE_INIT_MODE>
	HAL_CAN_LEAVE_SLEEP_MODE();
 8000b84:	f7ff ff12 	bl	80009ac <HAL_CAN_LEAVE_SLEEP_MODE>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_CAN_FILTER_CONFIG>:
void HAL_CAN_RX_FIFO_DELOCKING()
{
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_RFLM);
}
void HAL_CAN_FILTER_CONFIG(s_filterxConfig* FRAMEX_CONFIG)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(FRAMEX_CONFIG->filterBank<=13UL)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	2b0d      	cmp	r3, #13
 8000b9a:	f200 80c3 	bhi.w	8000d24 <HAL_CAN_FILTER_CONFIG+0x198>
	{
		//FILTER BANK INDEX MASK
		uint32_t filterIndexMsk=1UL<<(FRAMEX_CONFIG->filterBank);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	60fb      	str	r3, [r7, #12]

		/*****************************************************************************/
		//SET FINIT :FIFO INITIALIZATION MODE
		SET_BIT(CAN_INSTANCE->FMR,CAN_FMR_FINIT);
 8000baa:	4b61      	ldr	r3, [pc, #388]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000bb2:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0201 	orr.w	r2, r2, #1
 8000bba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		//DE-ACTIVATE THE FILTER BANK
		CLEAR_BIT(CAN_INSTANCE->FA1R,filterIndexMsk);
 8000bbe:	4b5c      	ldr	r3, [pc, #368]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43da      	mvns	r2, r3
 8000bca:	4b59      	ldr	r3, [pc, #356]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	400a      	ands	r2, r1
 8000bd0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		/*****************************************************************************/
		//SET FILTER MODE
		if(FRAMEX_CONFIG->filterxMode==MSK_MODE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10b      	bne.n	8000bf4 <HAL_CAN_FILTER_CONFIG+0x68>
		{
			CLEAR_BIT(CAN_INSTANCE->FM1R,filterIndexMsk);
 8000bdc:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43da      	mvns	r2, r3
 8000be8:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	400a      	ands	r2, r1
 8000bee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000bf2:	e00d      	b.n	8000c10 <HAL_CAN_FILTER_CONFIG+0x84>
		}
		else if(FRAMEX_CONFIG->filterxMode==ID_MODE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d109      	bne.n	8000c10 <HAL_CAN_FILTER_CONFIG+0x84>
		{
			SET_BIT(CAN_INSTANCE->FM1R,filterIndexMsk);
 8000bfc:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000c04:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			//parameter ERROR
		}
		/*****************************************************************************/
		//SET FILTER SCALE

		if(FRAMEX_CONFIG->filterxScale==DUAL_16)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d128      	bne.n	8000c6a <HAL_CAN_FILTER_CONFIG+0xde>
		{	//shift by HIGH<<5 in case of STD_ID
			//shift by
			CLEAR_BIT(CAN_INSTANCE->FS1R,filterIndexMsk);
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43da      	mvns	r2, r3
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	400a      	ands	r2, r1
 8000c2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			//assign mask or identifier code based on your assigned FILTRATION MODE
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR1=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_LOW&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_LOW&0X0000FFFF);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	889b      	ldrh	r3, [r3, #4]
 8000c32:	0419      	lsls	r1, r3, #16
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	891b      	ldrh	r3, [r3, #8]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68d2      	ldr	r2, [r2, #12]
 8000c42:	4301      	orrs	r1, r0
 8000c44:	3248      	adds	r2, #72	; 0x48
 8000c46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR2=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_HIGH&0X0000FFFF);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	88db      	ldrh	r3, [r3, #6]
 8000c4e:	041a      	lsls	r2, r3, #16
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	895b      	ldrh	r3, [r3, #10]
 8000c54:	4618      	mov	r0, r3
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c58:	6819      	ldr	r1, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	4302      	orrs	r2, r0
 8000c60:	3348      	adds	r3, #72	; 0x48
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	e02a      	b.n	8000cc0 <HAL_CAN_FILTER_CONFIG+0x134>

		}
		else if(FRAMEX_CONFIG->filterxScale==SINGLE_32)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d126      	bne.n	8000cc0 <HAL_CAN_FILTER_CONFIG+0x134>
		{	//shift by HIGH<<5 in case of STD_ID
			//shift by LOW<<3 in case of EXT_ID
			SET_BIT(CAN_INSTANCE->FS1R,filterIndexMsk);
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			//assign mask or identifier code based on your assigned FILTRATION MODE
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR1=(((uint32_t)FRAMEX_CONFIG->MSG_ID_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_LOW&0X0000FFFF);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	895b      	ldrh	r3, [r3, #10]
 8000c8a:	0419      	lsls	r1, r3, #16
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	891b      	ldrh	r3, [r3, #8]
 8000c90:	4618      	mov	r0, r3
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68d2      	ldr	r2, [r2, #12]
 8000c9a:	4301      	orrs	r1, r0
 8000c9c:	3248      	adds	r2, #72	; 0x48
 8000c9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR2=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_LOW&0X0000FFFF);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	88db      	ldrh	r3, [r3, #6]
 8000ca6:	041a      	lsls	r2, r3, #16
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	889b      	ldrh	r3, [r3, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	4302      	orrs	r2, r0
 8000cb8:	3348      	adds	r3, #72	; 0x48
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	605a      	str	r2, [r3, #4]
		{
			//param ERROR
		}
		/******************************************************************************/
		//FILTER BANK FIFO ASSIGNATION
		if(FRAMEX_CONFIG->filterxAssign==FIFO0)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	789b      	ldrb	r3, [r3, #2]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10b      	bne.n	8000ce0 <HAL_CAN_FILTER_CONFIG+0x154>
		{
			CLEAR_BIT(CAN_INSTANCE->FFA1R,filterIndexMsk);
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	400a      	ands	r2, r1
 8000cda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000cde:	e00d      	b.n	8000cfc <HAL_CAN_FILTER_CONFIG+0x170>
		}
		else if(FRAMEX_CONFIG->filterxAssign==FIFO1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	789b      	ldrb	r3, [r3, #2]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d109      	bne.n	8000cfc <HAL_CAN_FILTER_CONFIG+0x170>
		{
			SET_BIT(CAN_INSTANCE->FFA1R,filterIndexMsk);
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		{
			//param ERROR
		}
		/*******************************************************************************/
		//FILTER ACTIVATION
		SET_BIT(CAN_INSTANCE->FA1R,filterIndexMsk);
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		//CLEAR FINIT TO EXIT FILTER INIT MODE
		CLEAR_BIT(CAN_INSTANCE->FMR,CAN_FMR_FINIT);
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0201 	bic.w	r2, r2, #1
 8000d20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	else
	{
		//parameter ERROR
	}
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_CAN_psRXFRAME>:

void HAL_CAN_psRXFRAME(S_CAN_RXFRAME* RX_FRAME, uint8_t DATA[],E_FILTER_ASSIGN RX_FIFO)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71fb      	strb	r3, [r7, #7]

	RX_FRAME->ID_TYPE=(CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_IDE;
 8000d42:	4b6a      	ldr	r3, [pc, #424]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	331b      	adds	r3, #27
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	701a      	strb	r2, [r3, #0]
	/*****************************************************************************************/
	if(RX_FRAME->ID_TYPE==STD_ID)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10c      	bne.n	8000d7e <HAL_CAN_psRXFRAME+0x4a>
	{
		RX_FRAME->StdId=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_STID)>>CAN_RI0R_STID_Pos;
 8000d64:	4b61      	ldr	r3, [pc, #388]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	331b      	adds	r3, #27
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	4413      	add	r3, r2
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	0d5b      	lsrs	r3, r3, #21
 8000d74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	e00f      	b.n	8000d9e <HAL_CAN_psRXFRAME+0x6a>
	}
	else if(RX_FRAME->ID_TYPE==EXT_ID)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d10b      	bne.n	8000d9e <HAL_CAN_psRXFRAME+0x6a>
	{
		RX_FRAME->ExtId=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_EXID)>>CAN_RI0R_EXID_Pos;
 8000d86:	4b59      	ldr	r3, [pc, #356]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	331b      	adds	r3, #27
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	609a      	str	r2, [r3, #8]
	{
		//parameter ERROR
	}
	/****************************************************************************************/

	RX_FRAME->RTR=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_RTR)>>CAN_RI0R_RTR_Pos;
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	331b      	adds	r3, #27
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4413      	add	r3, r2
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	60da      	str	r2, [r3, #12]

	/****************************************************************************************/

	RX_FRAME->DLC=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDTR)&CAN_RDT0R_DLC)>>CAN_RDT0R_DLC_Pos;
 8000db6:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	331b      	adds	r3, #27
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 020f 	and.w	r2, r3, #15
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

	/****************************************************************************************/

	RX_FRAME->FILTER_BANK_INDEX=(((CAN_INSTANCE->sFIFOMailBox[RX_FIFO]).RDTR)&CAN_RDT0R_FMI)>>CAN_RDT0R_FMI_Pos;
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	331b      	adds	r3, #27
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	4413      	add	r3, r2
 8000dda:	3304      	adds	r3, #4
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	615a      	str	r2, [r3, #20]

	/*****************************************************************************************/

	DATA[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000de6:	4b41      	ldr	r3, [pc, #260]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	701a      	strb	r2, [r3, #0]
	DATA[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	4413      	add	r3, r2
 8000e06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0a1a      	lsrs	r2, r3, #8
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	701a      	strb	r2, [r3, #0]
    DATA[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	4413      	add	r3, r2
 8000e20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	0c1a      	lsrs	r2, r3, #16
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
    DATA[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0e1a      	lsrs	r2, r3, #24
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3303      	adds	r3, #3
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	701a      	strb	r2, [r3, #0]
    DATA[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4413      	add	r3, r2
 8000e54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
    DATA[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	0a1a      	lsrs	r2, r3, #8
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3305      	adds	r3, #5
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	701a      	strb	r2, [r3, #0]
    DATA[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	4413      	add	r3, r2
 8000e86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	0c1a      	lsrs	r2, r3, #16
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3306      	adds	r3, #6
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	701a      	strb	r2, [r3, #0]
    DATA[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	0e1a      	lsrs	r2, r3, #24
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3307      	adds	r3, #7
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	701a      	strb	r2, [r3, #0]

    /******************************************************************************************/

    if(RX_FIFO==FIFO0)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_psRXFRAME+0x194>
    {
    	SET_BIT(CAN_INSTANCE->RF0R, CAN_RF0R_RFOM0);
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f042 0220 	orr.w	r2, r2, #32
 8000ec4:	60da      	str	r2, [r3, #12]
    }
    else
    {
    	//parameter ERROR
    }
}
 8000ec6:	e00a      	b.n	8000ede <HAL_CAN_psRXFRAME+0x1aa>
    else if(RX_FIFO==FIFO1)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d107      	bne.n	8000ede <HAL_CAN_psRXFRAME+0x1aa>
    	SET_BIT(CAN_INSTANCE->RF1R, CAN_RF1R_RFOM1);
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_CAN_psRXFRAME+0x1b8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0220 	orr.w	r2, r2, #32
 8000edc:	611a      	str	r2, [r3, #16]
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_CAN_RX_FRAMES_NUM>:

void HAL_CAN_RX_FRAMES_NUM(E_FILTER_ASSIGN RX_FIFO,uint8_t* FRAMES_NUM)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
	*FRAMES_NUM=0;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
	if(RX_FIFO==FIFO0)
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d109      	bne.n	8000f1c <HAL_CAN_RX_FRAMES_NUM+0x2c>
	{
		*FRAMES_NUM = CAN_INSTANCE->RF0R & CAN_RF0R_FMP0;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_CAN_RX_FRAMES_NUM+0x50>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		//parameter ERROR
	}
}
 8000f1a:	e00b      	b.n	8000f34 <HAL_CAN_RX_FRAMES_NUM+0x44>
	else if(RX_FIFO==FIFO1)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_RX_FRAMES_NUM+0x44>
		*FRAMES_NUM = CAN_INSTANCE->RF1R & CAN_RF1R_FMP1;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_CAN_RX_FRAMES_NUM+0x50>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	701a      	strb	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f931 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fc4a 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f93b 	bl	8001222 <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f911 	bl	80011ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000000c 	.word	0x2000000c
 800100c:	2000002c 	.word	0x2000002c

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000002c 	.word	0x2000002c

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000000c 	.word	0x2000000c

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff47 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff5c 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff8e 	bl	8001128 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5d 	bl	80010d4 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffb0 	bl	8001190 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e165      	b.n	8001524 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8154 	bne.w	800151e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	2b02      	cmp	r3, #2
 800128c:	d130      	bne.n	80012f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 0201 	and.w	r2, r3, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d017      	beq.n	800132c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80ae 	beq.w	800151e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_GPIO_Init+0x300>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a5c      	ldr	r2, [pc, #368]	; (800153c <HAL_GPIO_Init+0x300>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b5a      	ldr	r3, [pc, #360]	; (800153c <HAL_GPIO_Init+0x300>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_GPIO_Init+0x304>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4f      	ldr	r2, [pc, #316]	; (8001544 <HAL_GPIO_Init+0x308>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d025      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <HAL_GPIO_Init+0x30c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01f      	beq.n	8001452 <HAL_GPIO_Init+0x216>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4d      	ldr	r2, [pc, #308]	; (800154c <HAL_GPIO_Init+0x310>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x212>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_GPIO_Init+0x314>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x20e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4b      	ldr	r2, [pc, #300]	; (8001554 <HAL_GPIO_Init+0x318>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x20a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4a      	ldr	r2, [pc, #296]	; (8001558 <HAL_GPIO_Init+0x31c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x206>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	; (800155c <HAL_GPIO_Init+0x320>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x202>
 800143a:	2306      	movs	r3, #6
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x21c>
 800143e:	2307      	movs	r3, #7
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x21c>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x21c>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x21c>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x21c>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x21c>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x21c>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x304>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_GPIO_Init+0x324>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a31      	ldr	r2, [pc, #196]	; (8001560 <HAL_GPIO_Init+0x324>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_GPIO_Init+0x324>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <HAL_GPIO_Init+0x324>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_GPIO_Init+0x324>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_GPIO_Init+0x324>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_GPIO_Init+0x324>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_GPIO_Init+0x324>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f ae96 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40021400 	.word	0x40021400
 800155c:	40021800 	.word	0x40021800
 8001560:	40013c00 	.word	0x40013c00

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0cc      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d90c      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b8      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a58      	ldr	r2, [pc, #352]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a52      	ldr	r2, [pc, #328]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494d      	ldr	r1, [pc, #308]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e067      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4934      	ldr	r1, [pc, #208]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fcc2 	bl	8001010 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fcbe 	bl	8001010 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e032      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4916      	ldr	r1, [pc, #88]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f821 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001722:	4602      	mov	r2, r0
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	490a      	ldr	r1, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	5ccb      	ldrb	r3, [r1, r3]
 8001732:	fa22 f303 	lsr.w	r3, r2, r3
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc22 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00
 8001754:	40023800 	.word	0x40023800
 8001758:	08002080 	.word	0x08002080
 800175c:	20000000 	.word	0x20000000
 8001760:	20000008 	.word	0x20000008

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001768:	b0a6      	sub	sp, #152	; 0x98
 800176a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800178a:	4bc8      	ldr	r3, [pc, #800]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b0c      	cmp	r3, #12
 8001794:	f200 817e 	bhi.w	8001a94 <HAL_RCC_GetSysClockFreq+0x330>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017d5 	.word	0x080017d5
 80017a4:	08001a95 	.word	0x08001a95
 80017a8:	08001a95 	.word	0x08001a95
 80017ac:	08001a95 	.word	0x08001a95
 80017b0:	080017dd 	.word	0x080017dd
 80017b4:	08001a95 	.word	0x08001a95
 80017b8:	08001a95 	.word	0x08001a95
 80017bc:	08001a95 	.word	0x08001a95
 80017c0:	080017e5 	.word	0x080017e5
 80017c4:	08001a95 	.word	0x08001a95
 80017c8:	08001a95 	.word	0x08001a95
 80017cc:	08001a95 	.word	0x08001a95
 80017d0:	0800194f 	.word	0x0800194f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017d4:	4bb6      	ldr	r3, [pc, #728]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80017da:	e15f      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017dc:	4bb5      	ldr	r3, [pc, #724]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x350>)
 80017de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017e2:	e15b      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e4:	4bb1      	ldr	r3, [pc, #708]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f0:	4bae      	ldr	r3, [pc, #696]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d031      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fc:	4bab      	ldr	r3, [pc, #684]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	2200      	movs	r2, #0
 8001804:	66bb      	str	r3, [r7, #104]	; 0x68
 8001806:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800180a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180e:	663b      	str	r3, [r7, #96]	; 0x60
 8001810:	2300      	movs	r3, #0
 8001812:	667b      	str	r3, [r7, #100]	; 0x64
 8001814:	4ba7      	ldr	r3, [pc, #668]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x350>)
 8001816:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800181a:	462a      	mov	r2, r5
 800181c:	fb03 f202 	mul.w	r2, r3, r2
 8001820:	2300      	movs	r3, #0
 8001822:	4621      	mov	r1, r4
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	4aa2      	ldr	r2, [pc, #648]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x350>)
 800182c:	4621      	mov	r1, r4
 800182e:	fba1 1202 	umull	r1, r2, r1, r2
 8001832:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001834:	460a      	mov	r2, r1
 8001836:	67ba      	str	r2, [r7, #120]	; 0x78
 8001838:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800183a:	4413      	add	r3, r2
 800183c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800183e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001842:	2200      	movs	r2, #0
 8001844:	65bb      	str	r3, [r7, #88]	; 0x58
 8001846:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800184c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001850:	f7fe fcd8 	bl	8000204 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800185e:	e064      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	2200      	movs	r2, #0
 8001868:	653b      	str	r3, [r7, #80]	; 0x50
 800186a:	657a      	str	r2, [r7, #84]	; 0x54
 800186c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800186e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
 8001874:	2300      	movs	r3, #0
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001878:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800187c:	4622      	mov	r2, r4
 800187e:	462b      	mov	r3, r5
 8001880:	f04f 0000 	mov.w	r0, #0
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	0159      	lsls	r1, r3, #5
 800188a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188e:	0150      	lsls	r0, r2, #5
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4621      	mov	r1, r4
 8001896:	1a51      	subs	r1, r2, r1
 8001898:	6139      	str	r1, [r7, #16]
 800189a:	4629      	mov	r1, r5
 800189c:	eb63 0301 	sbc.w	r3, r3, r1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018ae:	4659      	mov	r1, fp
 80018b0:	018b      	lsls	r3, r1, #6
 80018b2:	4651      	mov	r1, sl
 80018b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b8:	4651      	mov	r1, sl
 80018ba:	018a      	lsls	r2, r1, #6
 80018bc:	4651      	mov	r1, sl
 80018be:	ebb2 0801 	subs.w	r8, r2, r1
 80018c2:	4659      	mov	r1, fp
 80018c4:	eb63 0901 	sbc.w	r9, r3, r1
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018dc:	4690      	mov	r8, r2
 80018de:	4699      	mov	r9, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	eb18 0303 	adds.w	r3, r8, r3
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	462b      	mov	r3, r5
 80018ea:	eb49 0303 	adc.w	r3, r9, r3
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018fc:	4629      	mov	r1, r5
 80018fe:	028b      	lsls	r3, r1, #10
 8001900:	4621      	mov	r1, r4
 8001902:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001906:	4621      	mov	r1, r4
 8001908:	028a      	lsls	r2, r1, #10
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001912:	2200      	movs	r2, #0
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
 8001916:	647a      	str	r2, [r7, #68]	; 0x44
 8001918:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800191c:	f7fe fc72 	bl	8000204 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800192a:	4b60      	ldr	r3, [pc, #384]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	3301      	adds	r3, #1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800193c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800194c:	e0a6      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194e:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b54      	ldr	r3, [pc, #336]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d02a      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b51      	ldr	r3, [pc, #324]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001974:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001978:	2100      	movs	r1, #0
 800197a:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x350>)
 800197c:	fb03 f201 	mul.w	r2, r3, r1
 8001980:	2300      	movs	r3, #0
 8001982:	fb00 f303 	mul.w	r3, r0, r3
 8001986:	4413      	add	r3, r2
 8001988:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x350>)
 800198a:	fba0 1202 	umull	r1, r2, r0, r2
 800198e:	677a      	str	r2, [r7, #116]	; 0x74
 8001990:	460a      	mov	r2, r1
 8001992:	673a      	str	r2, [r7, #112]	; 0x70
 8001994:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001996:	4413      	add	r3, r2
 8001998:	677b      	str	r3, [r7, #116]	; 0x74
 800199a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800199e:	2200      	movs	r2, #0
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
 80019a2:	637a      	str	r2, [r7, #52]	; 0x34
 80019a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019ac:	f7fe fc2a 	bl	8000204 <__aeabi_uldivmod>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4613      	mov	r3, r2
 80019b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019ba:	e05b      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	2200      	movs	r2, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
 80019d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d8:	4642      	mov	r2, r8
 80019da:	464b      	mov	r3, r9
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0159      	lsls	r1, r3, #5
 80019e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ea:	0150      	lsls	r0, r2, #5
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4641      	mov	r1, r8
 80019f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019f6:	4649      	mov	r1, r9
 80019f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a10:	ebb2 040a 	subs.w	r4, r2, sl
 8001a14:	eb63 050b 	sbc.w	r5, r3, fp
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	00eb      	lsls	r3, r5, #3
 8001a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a26:	00e2      	lsls	r2, r4, #3
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	464b      	mov	r3, r9
 8001a34:	eb45 0303 	adc.w	r3, r5, r3
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a46:	4629      	mov	r1, r5
 8001a48:	028b      	lsls	r3, r1, #10
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a50:	4621      	mov	r1, r4
 8001a52:	028a      	lsls	r2, r1, #10
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	61fa      	str	r2, [r7, #28]
 8001a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a66:	f7fe fbcd 	bl	8000204 <__aeabi_uldivmod>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4613      	mov	r3, r2
 8001a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_GetSysClockFreq+0x348>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0f1b      	lsrs	r3, r3, #28
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a92:	e003      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3798      	adds	r7, #152	; 0x98
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400
 8001ab4:	017d7840 	.word	0x017d7840

08001ab8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e28d      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8083 	beq.w	8001bde <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ad8:	4b94      	ldr	r3, [pc, #592]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d019      	beq.n	8001b18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ae4:	4b91      	ldr	r3, [pc, #580]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001afc:	d00c      	beq.n	8001b18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d112      	bne.n	8001b30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b16:	d10b      	bne.n	8001b30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	4b84      	ldr	r3, [pc, #528]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d05b      	beq.n	8001bdc <HAL_RCC_OscConfig+0x124>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d157      	bne.n	8001bdc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e25a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_OscConfig+0x90>
 8001b3a:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7b      	ldr	r2, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0xcc>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0xb4>
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a75      	ldr	r2, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xcc>
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6b      	ldr	r2, [pc, #428]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fa40 	bl	8001010 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fa3c 	bl	8001010 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e21f      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0xdc>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fa2c 	bl	8001010 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fa28 	bl	8001010 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e20b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x104>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06f      	beq.n	8001cca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bea:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d017      	beq.n	8001c26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf6:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x186>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1d3      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4937      	ldr	r1, [pc, #220]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_OscConfig+0x278>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f9d5 	bl	8001010 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f9d1 	bl	8001010 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1b4      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4925      	ldr	r1, [pc, #148]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x278>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f9b4 	bl	8001010 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff f9b0 	bl	8001010 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e193      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d036      	beq.n	8001d44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f994 	bl	8001010 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff f990 	bl	8001010 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e173      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x234>
 8001d0a:	e01b      	b.n	8001d44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff f97d 	bl	8001010 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff f979 	bl	8001010 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e15c      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b8a      	ldr	r3, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ea      	bne.n	8001d1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8097 	beq.w	8001e80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b83      	ldr	r3, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a7e      	ldr	r2, [pc, #504]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <HAL_RCC_OscConfig+0x4b0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0x4b0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x4b0>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f939 	bl	8001010 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f935 	bl	8001010 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e118      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b6c      	ldr	r3, [pc, #432]	; (8001f68 <HAL_RCC_OscConfig+0x4b0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x31e>
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x358>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x340>
 8001dde:	4b61      	ldr	r3, [pc, #388]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a60      	ldr	r2, [pc, #384]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a5d      	ldr	r2, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x358>
 8001df8:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a59      	ldr	r2, [pc, #356]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff f8fa 	bl	8001010 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff f8f6 	bl	8001010 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0d7      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ee      	beq.n	8001e20 <HAL_RCC_OscConfig+0x368>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e44:	f7ff f8e4 	bl	8001010 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f8e0 	bl	8001010 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0c1      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a3a      	ldr	r2, [pc, #232]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80ad 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d060      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d145      	bne.n	8001f2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <HAL_RCC_OscConfig+0x4b4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f8b4 	bl	8001010 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff f8b0 	bl	8001010 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e093      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	071b      	lsls	r3, r3, #28
 8001ef6:	491b      	ldr	r1, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x4b4>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff f885 	bl	8001010 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff f881 	bl	8001010 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e064      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x452>
 8001f28:	e05c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_RCC_OscConfig+0x4b4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f86e 	bl	8001010 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f86a 	bl	8001010 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e04d      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x480>
 8001f56:	e045      	b.n	8001fe4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e040      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <HAL_RCC_OscConfig+0x538>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d030      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d129      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d122      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d119      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <memset>:
 8001ff4:	4402      	add	r2, r0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d100      	bne.n	8001ffe <memset+0xa>
 8001ffc:	4770      	bx	lr
 8001ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8002002:	e7f9      	b.n	8001ff8 <memset+0x4>

08002004 <__libc_init_array>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	4d0d      	ldr	r5, [pc, #52]	; (800203c <__libc_init_array+0x38>)
 8002008:	4c0d      	ldr	r4, [pc, #52]	; (8002040 <__libc_init_array+0x3c>)
 800200a:	1b64      	subs	r4, r4, r5
 800200c:	10a4      	asrs	r4, r4, #2
 800200e:	2600      	movs	r6, #0
 8002010:	42a6      	cmp	r6, r4
 8002012:	d109      	bne.n	8002028 <__libc_init_array+0x24>
 8002014:	4d0b      	ldr	r5, [pc, #44]	; (8002044 <__libc_init_array+0x40>)
 8002016:	4c0c      	ldr	r4, [pc, #48]	; (8002048 <__libc_init_array+0x44>)
 8002018:	f000 f818 	bl	800204c <_init>
 800201c:	1b64      	subs	r4, r4, r5
 800201e:	10a4      	asrs	r4, r4, #2
 8002020:	2600      	movs	r6, #0
 8002022:	42a6      	cmp	r6, r4
 8002024:	d105      	bne.n	8002032 <__libc_init_array+0x2e>
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	f855 3b04 	ldr.w	r3, [r5], #4
 800202c:	4798      	blx	r3
 800202e:	3601      	adds	r6, #1
 8002030:	e7ee      	b.n	8002010 <__libc_init_array+0xc>
 8002032:	f855 3b04 	ldr.w	r3, [r5], #4
 8002036:	4798      	blx	r3
 8002038:	3601      	adds	r6, #1
 800203a:	e7f2      	b.n	8002022 <__libc_init_array+0x1e>
 800203c:	08002098 	.word	0x08002098
 8002040:	08002098 	.word	0x08002098
 8002044:	08002098 	.word	0x08002098
 8002048:	0800209c 	.word	0x0800209c

0800204c <_init>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr

08002058 <_fini>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr
