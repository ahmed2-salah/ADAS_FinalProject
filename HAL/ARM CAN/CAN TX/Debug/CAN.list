
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b4  080023b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080023b4  080023b4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023b4  080023b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023b4  080023b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080023bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000020  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000472a  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010d9  00000000  00000000  000247ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000480  00000000  00000000  00025888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000033d  00000000  00000000  00025d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019127  00000000  00000000  00026045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000060a2  00000000  00000000  0003f16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000926f9  00000000  00000000  0004520e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000100c  00000000  00000000  000d7908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000d8914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002348 	.word	0x08002348

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002348 	.word	0x08002348

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b08c      	sub	sp, #48	; 0x30
 80001cc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80001ce:	f000 fb95 	bl	80008fc <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f841 	bl	8000258 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize all configured peripherals */

  HAL_CAN_MspInit();
 80001d6:	f000 f8d7 	bl	8000388 <HAL_CAN_MspInit>
  MX_GPIO_Init();
 80001da:	f000 f879 	bl	80002d0 <MX_GPIO_Init>
  //MX_CAN_Init();

  S_CAN_INIT_CONFIG initConfig={LOOPBACK_SILENT_MODE,ENABLE,DISABLE,DISABLE,ENABLE,DISABLE};
 80001de:	4a1b      	ldr	r2, [pc, #108]	; (800024c <main+0x84>)
 80001e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e8:	6018      	str	r0, [r3, #0]
 80001ea:	3304      	adds	r3, #4
 80001ec:	8019      	strh	r1, [r3, #0]
  S_CAN_BITIME_CONFIG bitime={PRESCALER_32,TS1_Q,TS2_Q};
 80001ee:	4b18      	ldr	r3, [pc, #96]	; (8000250 <main+0x88>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  //s_filterxConfig FILTERX_CONFIG={MSK_MODE,SINGLE_32,FIFO0,ENABLE,0X0000,0X123<<5,0X0000,0X123<<5,10};

  S_CAN_TXFRAME TX_FRAME={STD_ID,0X123,0,1,2,DISABLE};
 80001f4:	4b17      	ldr	r3, [pc, #92]	; (8000254 <main+0x8c>)
 80001f6:	f107 040c 	add.w	r4, r7, #12
 80001fa:	461d      	mov	r5, r3
 80001fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000200:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000204:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t DATA_TX[8]={'Y','G'};
 8000208:	f244 7359 	movw	r3, #18265	; 0x4759
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
  uint8_t MAILBOX_CODE;

  /*initialize the can */
  HAL_CAN_vInit(&initConfig,&bitime);
 8000212:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021a:	4611      	mov	r1, r2
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f9c3 	bl	80005a8 <HAL_CAN_vInit>

  /*set RX filter configuration*/
  //HAL_CAN_FILTER_CONFIG(&FILTERX_CONFIG);
  /*acquire an access on the CAN bus */

  HAL_CAN_start();
 8000222:	f000 fa3b 	bl	800069c <HAL_CAN_start>
  /*prepare the TX frame and send*/
  HAL_CAN_pu8TXFRAME(&initConfig,&TX_FRAME, DATA_TX, & MAILBOX_CODE);
 8000226:	1cfb      	adds	r3, r7, #3
 8000228:	1d3a      	adds	r2, r7, #4
 800022a:	f107 010c 	add.w	r1, r7, #12
 800022e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000232:	f000 fa3b 	bl	80006ac <HAL_CAN_pu8TXFRAME>

  uint8_t status;
  do
  {		//wait until data is no longer pending
	  HAL_CAN_u8IS_TXFRAME_PENDING(&status,MAILBOX_CODE);
 8000236:	78fa      	ldrb	r2, [r7, #3]
 8000238:	1cbb      	adds	r3, r7, #2
 800023a:	4611      	mov	r1, r2
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb37 	bl	80008b0 <HAL_CAN_u8IS_TXFRAME_PENDING>
  }
  while(status==1);
 8000242:	78bb      	ldrb	r3, [r7, #2]
 8000244:	2b01      	cmp	r3, #1
 8000246:	d0f6      	beq.n	8000236 <main+0x6e>
 if(DATA_RX[0]=='A')
 {
	 LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 }*/
 /* USER CODE END SysInit */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0x80>
 800024a:	bf00      	nop
 800024c:	08002360 	.word	0x08002360
 8000250:	08002368 	.word	0x08002368
 8000254:	0800236c 	.word	0x0800236c

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 f842 	bl	80022f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;//internal RC clk
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fe0a 	bl	8000ea8 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029a:	f000 f84b 	bl	8000334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fe34 	bl	8001f24 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f837 	bl	8000334 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <MX_GPIO_Init+0x60>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a11      	ldr	r2, [pc, #68]	; (8000330 <MX_GPIO_Init+0x60>)
 80002ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ee:	6153      	str	r3, [r2, #20]
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_GPIO_Init+0x60>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000306:	f000 fdb7 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800030a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4619      	mov	r1, r3
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f000 fc36 	bl	8000b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000328:	bf00      	nop
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000

08000334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000338:	b672      	cpsid	i
}
 800033a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800033c:	e7fe      	b.n	800033c <Error_Handler+0x8>
	...

08000340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_MspInit+0x44>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <HAL_MspInit+0x44>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_MspInit+0x44>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <HAL_MspInit+0x44>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <HAL_MspInit+0x44>)
 8000364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000368:	61d3      	str	r3, [r2, #28]
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_MspInit+0x44>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 030c 	add.w	r3, r7, #12
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]
  {*/
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <HAL_CAN_MspInit+0x74>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a16      	ldr	r2, [pc, #88]	; (80003fc <HAL_CAN_MspInit+0x74>)
 80003a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <HAL_CAN_MspInit+0x74>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003b2:	60bb      	str	r3, [r7, #8]
 80003b4:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <HAL_CAN_MspInit+0x74>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a10      	ldr	r2, [pc, #64]	; (80003fc <HAL_CAN_MspInit+0x74>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <HAL_CAN_MspInit+0x74>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80003ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d4:	2302      	movs	r3, #2
 80003d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003dc:	2303      	movs	r3, #3
 80003de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80003e0:	2309      	movs	r3, #9
 80003e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	f107 030c 	add.w	r3, r7, #12
 80003e8:	4619      	mov	r1, r3
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f000 fbd1 	bl	8000b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  //}

}
 80003f2:	bf00      	nop
 80003f4:	3720      	adds	r7, #32
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <NMI_Handler+0x4>

08000406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <HardFault_Handler+0x4>

0800040c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <MemManage_Handler+0x4>

08000412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <BusFault_Handler+0x4>

08000418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <UsageFault_Handler+0x4>

0800041e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044c:	f000 fa9c 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}

08000454 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <SystemInit+0x20>)
 800045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <SystemInit+0x20>)
 8000460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800047c:	f7ff ffea 	bl	8000454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004a6:	f001 ff2b 	bl	8002300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004aa:	f7ff fe8d 	bl	80001c8 <main>

080004ae <LoopForever>:

LoopForever:
    b LoopForever
 80004ae:	e7fe      	b.n	80004ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004bc:	080023bc 	.word	0x080023bc
  ldr r2, =_sbss
 80004c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004c4:	20000030 	.word	0x20000030

080004c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC1_2_IRQHandler>
	...

080004cc <HAL_CAN_LEAVE_SLEEP_MODE>:
}



void HAL_CAN_LEAVE_SLEEP_MODE(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_SLEEP);
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f022 0202 	bic.w	r2, r2, #2
 80004de:	601a      	str	r2, [r3, #0]
	while((READ_BIT(CAN_INSTANCE->MSR,CAN_MSR_SLAK)>>CAN_MSR_SLAK_Pos)==HIGH);
 80004e0:	bf00      	nop
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	085b      	lsrs	r3, r3, #1
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d0f7      	beq.n	80004e2 <HAL_CAN_LEAVE_SLEEP_MODE+0x16>
}
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000004 	.word	0x20000004

08000504 <HAL_CAN_ENTER_INIT_MODE>:



void HAL_CAN_ENTER_INIT_MODE(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

	//for software initialization
	SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//SET INREQ BIT
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG RAISING
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK_Pos)==LOW);
 8000518:	bf00      	nop
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0f8      	beq.n	800051a <HAL_CAN_ENTER_INIT_MODE+0x16>
	//LEAVE SLEEP MODE
	HAL_CAN_LEAVE_SLEEP_MODE();
 8000528:	f7ff ffd0 	bl	80004cc <HAL_CAN_LEAVE_SLEEP_MODE>

	//ALL MASSAGES TO AND FROM THE CAN BUS ARE STOPPED
	//OUTPUT OF CANTX=1	RECESSIVE
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000004 	.word	0x20000004

08000534 <HAL_CAN_LEAVE_INIT_MODE>:



void HAL_CAN_LEAVE_INIT_MODE(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//CLEAR INREQ BIT
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f022 0201 	bic.w	r2, r2, #1
 8000546:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG TO FALL
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK_Pos)==HIGH);
 8000548:	bf00      	nop
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b01      	cmp	r3, #1
 8000556:	d0f8      	beq.n	800054a <HAL_CAN_LEAVE_INIT_MODE+0x16>
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_CAN_vsetbiTime>:



void HAL_CAN_vsetbiTime(S_CAN_BITIME_CONFIG* bitime)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	//HAL_CAN_ENTER_INIT_MODE();
	WRITE_REG(CAN_INSTANCE->BTR,((CAN_INSTANCE->BTR&0XFF000000)|(uint32_t)(bitime->prescaler<<CAN_BTR_BRP_Pos)|(uint32_t)(bitime->TS1_Qunata<<CAN_BTR_TS1_Pos)|(uint32_t)(bitime->TS2_Qunata<<CAN_BTR_TS2_Pos)));
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_CAN_vsetbiTime+0x3c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	8812      	ldrh	r2, [r2, #0]
 800057e:	4313      	orrs	r3, r2
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7892      	ldrb	r2, [r2, #2]
 8000584:	0412      	lsls	r2, r2, #16
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	78db      	ldrb	r3, [r3, #3]
 800058c:	051b      	lsls	r3, r3, #20
 800058e:	4619      	mov	r1, r3
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_CAN_vsetbiTime+0x3c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	430a      	orrs	r2, r1
 8000596:	61da      	str	r2, [r3, #28]
};
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_CAN_vInit>:
				break;
		}
}

void HAL_CAN_vInit(S_CAN_INIT_CONFIG* initConfig,S_CAN_BITIME_CONFIG* bitime)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	HAL_CAN_ENTER_INIT_MODE();
 80005b2:	f7ff ffa7 	bl	8000504 <HAL_CAN_ENTER_INIT_MODE>
/**************************************************************/
	if(!initConfig->IDENTIFIER_PRIORITY)//FIFO Priority
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	789b      	ldrb	r3, [r3, #2]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d108      	bne.n	80005d0 <HAL_CAN_vInit+0x28>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 80005be:	4b36      	ldr	r3, [pc, #216]	; (8000698 <HAL_CAN_vInit+0xf0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b34      	ldr	r3, [pc, #208]	; (8000698 <HAL_CAN_vInit+0xf0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f042 0204 	orr.w	r2, r2, #4
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	e007      	b.n	80005e0 <HAL_CAN_vInit+0x38>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <HAL_CAN_vInit+0xf0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b30      	ldr	r3, [pc, #192]	; (8000698 <HAL_CAN_vInit+0xf0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f022 0204 	bic.w	r2, r2, #4
 80005de:	601a      	str	r2, [r3, #0]
	}
/**************************************************************/

	if(!initConfig->AUTO_RETRANSMISSION)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d108      	bne.n	80005fa <HAL_CAN_vInit+0x52>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <HAL_CAN_vInit+0xf0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <HAL_CAN_vInit+0xf0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f042 0210 	orr.w	r2, r2, #16
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	e007      	b.n	800060a <HAL_CAN_vInit+0x62>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <HAL_CAN_vInit+0xf0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f022 0210 	bic.w	r2, r2, #16
 8000608:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->AUTO_BUSOFF_RECOVERY)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	78db      	ldrb	r3, [r3, #3]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d008      	beq.n	8000624 <HAL_CAN_vInit+0x7c>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <HAL_CAN_vInit+0xf0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	e007      	b.n	8000634 <HAL_CAN_vInit+0x8c>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <HAL_CAN_vInit+0xf0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000632:	601a      	str	r2, [r3, #0]
	}
/************************************************************/
	if(initConfig->AUTO_WAKEUP_MODE)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <HAL_CAN_vInit+0xa6>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <HAL_CAN_vInit+0xf0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f042 0220 	orr.w	r2, r2, #32
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e007      	b.n	800065e <HAL_CAN_vInit+0xb6>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f022 0220 	bic.w	r2, r2, #32
 800065c:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->TIME_TRIG_COM==ENABLE)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d108      	bne.n	8000678 <HAL_CAN_vInit+0xd0>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_CAN_vInit+0xf0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	e007      	b.n	8000688 <HAL_CAN_vInit+0xe0>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <HAL_CAN_vInit+0xf0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_CAN_vInit+0xf0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000686:	601a      	str	r2, [r3, #0]
	}
	HAL_CAN_vsetbiTime(bitime);
 8000688:	6838      	ldr	r0, [r7, #0]
 800068a:	f7ff ff6d 	bl	8000568 <HAL_CAN_vsetbiTime>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_CAN_start>:

void HAL_CAN_start(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	//ENTER THE NORMAL MODE
	HAL_CAN_LEAVE_INIT_MODE();
 80006a0:	f7ff ff48 	bl	8000534 <HAL_CAN_LEAVE_INIT_MODE>
	HAL_CAN_LEAVE_SLEEP_MODE();
 80006a4:	f7ff ff12 	bl	80004cc <HAL_CAN_LEAVE_SLEEP_MODE>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <HAL_CAN_pu8TXFRAME>:
void HAL_CAN_pu8TXFRAME(S_CAN_INIT_CONFIG* initConfig,S_CAN_TXFRAME* TX_FRAME, uint8_t DATA[], uint8_t* MAILBOX_CODE)
{
 80006ac:	b490      	push	{r4, r7}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
	//CHECK IF ANY MAILBOX IS EMPTY
	if((READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME0)>>CAN_TSR_TME0_Pos)||(READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME1)>>CAN_TSR_TME1_Pos)||(READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME2)>>CAN_TSR_TME2_Pos))
 80006ba:	4b7c      	ldr	r3, [pc, #496]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10e      	bne.n	80006e6 <HAL_CAN_pu8TXFRAME+0x3a>
 80006c8:	4b78      	ldr	r3, [pc, #480]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d107      	bne.n	80006e6 <HAL_CAN_pu8TXFRAME+0x3a>
 80006d6:	4b75      	ldr	r3, [pc, #468]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f000 80de 	beq.w	80008a2 <HAL_CAN_pu8TXFRAME+0x1f6>
	{
		//READ 2 MAILBOX CODE BITS
		*MAILBOX_CODE=(CAN_INSTANCE->TSR & CAN_TSR_CODE)>>CAN_TSR_CODE_Pos;
 80006e6:	4b71      	ldr	r3, [pc, #452]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	0e1b      	lsrs	r3, r3, #24
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 0303 	and.w	r3, r3, #3
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	701a      	strb	r2, [r3, #0]

		/******************************************************************************************************************/
		//CHECK ID TYPE
		if(TX_FRAME->ID_TYPE==STD_ID)
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d114      	bne.n	800072c <HAL_CAN_pu8TXFRAME+0x80>
		{
			//fill all mailbox registers
			CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR=(TX_FRAME->ID_TYPE)|((TX_FRAME->StdId)<<STDID_Pos)|((TX_FRAME->RTR)>>RTR_Pos);
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	055b      	lsls	r3, r3, #21
 800070e:	431a      	orrs	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	089b      	lsrs	r3, r3, #2
 8000716:	4965      	ldr	r1, [pc, #404]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 8000718:	6809      	ldr	r1, [r1, #0]
 800071a:	6838      	ldr	r0, [r7, #0]
 800071c:	7800      	ldrb	r0, [r0, #0]
 800071e:	431a      	orrs	r2, r3
 8000720:	f100 0318 	add.w	r3, r0, #24
 8000724:	011b      	lsls	r3, r3, #4
 8000726:	440b      	add	r3, r1
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e023      	b.n	8000774 <HAL_CAN_pu8TXFRAME+0xc8>
		}
		else
		{
			SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR,CAN_TI0R_IDE);
 800072c:	4b5f      	ldr	r3, [pc, #380]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3318      	adds	r3, #24
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	4413      	add	r3, r2
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a5b      	ldr	r2, [pc, #364]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 800073e:	6811      	ldr	r1, [r2, #0]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	4610      	mov	r0, r2
 8000746:	f043 0204 	orr.w	r2, r3, #4
 800074a:	f100 0318 	add.w	r3, r0, #24
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	440b      	add	r3, r1
 8000752:	601a      	str	r2, [r3, #0]
			CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR=((TX_FRAME->ExtId)>>EXTID_Pos)|((TX_FRAME->RTR)>>RTR_Pos);//fill all mailbox reigsters
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	08da      	lsrs	r2, r3, #3
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	4952      	ldr	r1, [pc, #328]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 8000762:	6809      	ldr	r1, [r1, #0]
 8000764:	6838      	ldr	r0, [r7, #0]
 8000766:	7800      	ldrb	r0, [r0, #0]
 8000768:	431a      	orrs	r2, r3
 800076a:	f100 0318 	add.w	r3, r0, #24
 800076e:	011b      	lsls	r3, r3, #4
 8000770:	440b      	add	r3, r1
 8000772:	601a      	str	r2, [r3, #0]
		}
		/*****************************************************************************************************************/

		//SET DATA LENGTH
		CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR=(TX_FRAME->DLC & CAN_TDT0R_DLC);
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	4a4c      	ldr	r2, [pc, #304]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 800077a:	6811      	ldr	r1, [r2, #0]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	7812      	ldrb	r2, [r2, #0]
 8000780:	4610      	mov	r0, r2
 8000782:	f003 020f 	and.w	r2, r3, #15
 8000786:	f100 0318 	add.w	r3, r0, #24
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	440b      	add	r3, r1
 800078e:	3304      	adds	r3, #4
 8000790:	601a      	str	r2, [r3, #0]

		/*****************************************************************************************************************/

		/* Set up the Transmit Global Time mode ONLY IN TIME TRIGGERED COMMUNICATION MODE WITH DLC=8 BYTES*/
		if((TX_FRAME->GLOBAL_TRANSMISSION==ENABLE)||(initConfig->TIME_TRIG_COM==ENABLE)||TX_FRAME->DLC==8UL)
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	7d1b      	ldrb	r3, [r3, #20]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d007      	beq.n	80007aa <HAL_CAN_pu8TXFRAME+0xfe>
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d003      	beq.n	80007aa <HAL_CAN_pu8TXFRAME+0xfe>
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	2b08      	cmp	r3, #8
 80007a8:	d116      	bne.n	80007d8 <HAL_CAN_pu8TXFRAME+0x12c>
		{
			SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR,CAN_TDT1R_TGT);
 80007aa:	4b40      	ldr	r3, [pc, #256]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	3318      	adds	r3, #24
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	4413      	add	r3, r2
 80007b8:	3304      	adds	r3, #4
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80007be:	6811      	ldr	r1, [r2, #0]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	4610      	mov	r0, r2
 80007c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007ca:	f100 0318 	add.w	r3, r0, #24
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	440b      	add	r3, r1
 80007d2:	3304      	adds	r3, #4
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e015      	b.n	8000804 <HAL_CAN_pu8TXFRAME+0x158>
		}
		else
		{
			CLEAR_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR,CAN_TDT1R_TGT);
 80007d8:	4b34      	ldr	r3, [pc, #208]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3318      	adds	r3, #24
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	4413      	add	r3, r2
 80007e6:	3304      	adds	r3, #4
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a30      	ldr	r2, [pc, #192]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 80007ec:	6811      	ldr	r1, [r2, #0]
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	4610      	mov	r0, r2
 80007f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007f8:	f100 0318 	add.w	r3, r0, #24
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	440b      	add	r3, r1
 8000800:	3304      	adds	r3, #4
 8000802:	601a      	str	r2, [r3, #0]
		}

		/******************************************************************************************************************/
		 /* INCLUDE the PRELOAD DATA */
		//HIGHER BYTES
		      WRITE_REG(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDHR,
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3307      	adds	r3, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	061a      	lsls	r2, r3, #24
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3306      	adds	r3, #6
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	431a      	orrs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3305      	adds	r3, #5
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	4313      	orrs	r3, r2
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	3204      	adds	r2, #4
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	4614      	mov	r4, r2
 8000828:	4a20      	ldr	r2, [pc, #128]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 800082a:	6811      	ldr	r1, [r2, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	7812      	ldrb	r2, [r2, #0]
 8000830:	4610      	mov	r0, r2
 8000832:	ea43 0204 	orr.w	r2, r3, r4
 8000836:	0103      	lsls	r3, r0, #4
 8000838:	440b      	add	r3, r1
 800083a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800083e:	601a      	str	r2, [r3, #0]
		                ((uint32_t)DATA[7] << CAN_TDH0R_DATA7_Pos) |
		                ((uint32_t)DATA[6] << CAN_TDH0R_DATA6_Pos) |
		                ((uint32_t)DATA[5] << CAN_TDH0R_DATA5_Pos) |
		                ((uint32_t)DATA[4] << CAN_TDH0R_DATA4_Pos));
	    //LOWER BYTES
		      WRITE_REG(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDLR,
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3303      	adds	r3, #3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	061a      	lsls	r2, r3, #24
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3302      	adds	r3, #2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	041b      	lsls	r3, r3, #16
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	4313      	orrs	r3, r2
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	7812      	ldrb	r2, [r2, #0]
 8000860:	4614      	mov	r4, r2
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 8000864:	6811      	ldr	r1, [r2, #0]
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	4610      	mov	r0, r2
 800086c:	ea43 0204 	orr.w	r2, r3, r4
 8000870:	0103      	lsls	r3, r0, #4
 8000872:	440b      	add	r3, r1
 8000874:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000878:	601a      	str	r2, [r3, #0]
		                ((uint32_t)DATA[2] << CAN_TDL0R_DATA2_Pos) |
		                ((uint32_t)DATA[1] << CAN_TDL0R_DATA1_Pos) |
		                ((uint32_t)DATA[0] << CAN_TDL0R_DATA0_Pos));
		/******************************************************************************************************************/
		/* Request transmission */
        SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR, CAN_TI0R_TXRQ);
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	3318      	adds	r3, #24
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	4413      	add	r3, r2
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_CAN_pu8TXFRAME+0x200>)
 800088c:	6811      	ldr	r1, [r2, #0]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	4610      	mov	r0, r2
 8000894:	f043 0201 	orr.w	r2, r3, #1
 8000898:	f100 0318 	add.w	r3, r0, #24
 800089c:	011b      	lsls	r3, r3, #4
 800089e:	440b      	add	r3, r1
 80008a0:	601a      	str	r2, [r3, #0]

	}

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc90      	pop	{r4, r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_CAN_u8IS_TXFRAME_PENDING>:
}



void HAL_CAN_u8IS_TXFRAME_PENDING(uint8_t* pendingStatus,uint8_t MAILBOX_CODE)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	460b      	mov	r3, r1
 80008ba:	70fb      	strb	r3, [r7, #3]
	*pendingStatus=1;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]

	uint32_t MASK= CAN_TSR_TME0<<MAILBOX_CODE;
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	60fb      	str	r3, [r7, #12]

	if((READ_BIT(CAN_INSTANCE->TSR,MASK)>>(MAILBOX_CODE+CAN_TSR_TME0_Pos))!=0)
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_CAN_u8IS_TXFRAME_PENDING+0x48>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	401a      	ands	r2, r3
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	331a      	adds	r3, #26
 80008dc:	fa22 f303 	lsr.w	r3, r2, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <HAL_CAN_u8IS_TXFRAME_PENDING+0x3a>
	{
		*pendingStatus=0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	}
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_Init+0x28>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_Init+0x28>)
 8000906:	f043 0310 	orr.w	r3, r3, #16
 800090a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f90d 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f808 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff fd12 	bl	8000340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40022000 	.word	0x40022000

08000928 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x54>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_InitTick+0x58>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f917 	bl	8000b7a <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e00e      	b.n	8000974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d80a      	bhi.n	8000972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 f8ed 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_InitTick+0x5c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000000 	.word	0x20000000
 8000980:	2000000c 	.word	0x2000000c
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	2000002c 	.word	0x2000002c

080009b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	2000002c 	.word	0x2000002c

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff8e 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff47 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff5c 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff8e 	bl	8000a80 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5d 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffb0 	bl	8000ae8 <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e14e      	b.n	8000e42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)/*pin_10 nit_0=0*/
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 8140 	beq.w	8000e3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d005      	beq.n	8000bd4 <HAL_GPIO_Init+0x40>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d130      	bne.n	8000c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	f003 0201 	and.w	r2, r3, #1
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d017      	beq.n	8000c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d123      	bne.n	8000cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	6939      	ldr	r1, [r7, #16]
 8000cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0203 	and.w	r2, r3, #3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 809a 	beq.w	8000e3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d08:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b52      	ldr	r3, [pc, #328]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d20:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <HAL_GPIO_Init+0x2d0>)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x1e0>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a46      	ldr	r2, [pc, #280]	; (8000e68 <HAL_GPIO_Init+0x2d4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x1dc>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a45      	ldr	r2, [pc, #276]	; (8000e6c <HAL_GPIO_Init+0x2d8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x1d8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a44      	ldr	r2, [pc, #272]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x1d4>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e006      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d68:	2305      	movs	r3, #5
 8000d6a:	e004      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	e002      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d74:	2300      	movs	r3, #0
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	f002 0203 	and.w	r2, r2, #3
 8000d7c:	0092      	lsls	r2, r2, #2
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d86:	4937      	ldr	r1, [pc, #220]	; (8000e64 <HAL_GPIO_Init+0x2d0>)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d94:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000db8:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de2:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_GPIO_Init+0x2e0>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f47f aea9 	bne.w	8000ba4 <HAL_GPIO_Init+0x10>
  }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000c00 	.word	0x48000c00
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f001 b823 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 817d 	beq.w	80011de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ee4:	4bbc      	ldr	r3, [pc, #752]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d00c      	beq.n	8000f0a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef0:	4bb9      	ldr	r3, [pc, #740]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d15c      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x10e>
 8000efc:	4bb6      	ldr	r3, [pc, #728]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f08:	d155      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x10e>
 8000f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f12:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	095b      	lsrs	r3, r3, #5
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d102      	bne.n	8000f3c <HAL_RCC_OscConfig+0x94>
 8000f36:	4ba8      	ldr	r3, [pc, #672]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	e015      	b.n	8000f68 <HAL_RCC_OscConfig+0xc0>
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f44:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f54:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f58:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f64:	4b9c      	ldr	r3, [pc, #624]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f6c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f70:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f74:	fa92 f2a2 	rbit	r2, r2
 8000f78:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f7c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f80:	fab2 f282 	clz	r2, r2
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	f042 0220 	orr.w	r2, r2, #32
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f002 021f 	and.w	r2, r2, #31
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 811f 	beq.w	80011dc <HAL_RCC_OscConfig+0x334>
 8000f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 8116 	bne.w	80011dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f000 bfaf 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12e>
 8000fc8:	4b83      	ldr	r3, [pc, #524]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a82      	ldr	r2, [pc, #520]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e036      	b.n	8001044 <HAL_RCC_OscConfig+0x19c>
 8000fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x158>
 8000fe6:	4b7c      	ldr	r3, [pc, #496]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a7b      	ldr	r2, [pc, #492]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b79      	ldr	r3, [pc, #484]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a78      	ldr	r2, [pc, #480]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8000ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e021      	b.n	8001044 <HAL_RCC_OscConfig+0x19c>
 8001000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001004:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x184>
 8001012:	4b71      	ldr	r3, [pc, #452]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a70      	ldr	r2, [pc, #448]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b6e      	ldr	r3, [pc, #440]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6d      	ldr	r2, [pc, #436]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0x19c>
 800102c:	4b6a      	ldr	r3, [pc, #424]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a69      	ldr	r2, [pc, #420]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b67      	ldr	r3, [pc, #412]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a66      	ldr	r2, [pc, #408]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001042:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001044:	4b64      	ldr	r3, [pc, #400]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	f023 020f 	bic.w	r2, r3, #15
 800104c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	495f      	ldr	r1, [pc, #380]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 800105a:	4313      	orrs	r3, r2
 800105c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800105e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d059      	beq.n	8001122 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106e:	f7ff fc9f 	bl	80009b0 <HAL_GetTick>
 8001072:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	e00a      	b.n	800108e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fc9a 	bl	80009b0 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b64      	cmp	r3, #100	; 0x64
 8001086:	d902      	bls.n	800108e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	f000 bf43 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
 800108e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001092:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d102      	bne.n	80010c0 <HAL_RCC_OscConfig+0x218>
 80010ba:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	e015      	b.n	80010ec <HAL_RCC_OscConfig+0x244>
 80010c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010f8:	fa92 f2a2 	rbit	r2, r2
 80010fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001100:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001104:	fab2 f282 	clz	r2, r2
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f002 021f 	and.w	r2, r2, #31
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0ab      	beq.n	8001078 <HAL_RCC_OscConfig+0x1d0>
 8001120:	e05d      	b.n	80011de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fc45 	bl	80009b0 <HAL_GetTick>
 8001126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e00a      	b.n	8001142 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fc40 	bl	80009b0 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d902      	bls.n	8001142 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	f000 bee9 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
 8001142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001146:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001156:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	095b      	lsrs	r3, r3, #5
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <HAL_RCC_OscConfig+0x2cc>
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	e015      	b.n	80011a0 <HAL_RCC_OscConfig+0x2f8>
 8001174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001178:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001190:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_RCC_OscConfig+0x330>)
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011ac:	fa92 f2a2 	rbit	r2, r2
 80011b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011b8:	fab2 f282 	clz	r2, r2
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	f002 021f 	and.w	r2, r2, #31
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ab      	bne.n	800112c <HAL_RCC_OscConfig+0x284>
 80011d4:	e003      	b.n	80011de <HAL_RCC_OscConfig+0x336>
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 817d 	beq.w	80014ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011f4:	4ba6      	ldr	r3, [pc, #664]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b08      	cmp	r3, #8
 800120a:	d172      	bne.n	80012f2 <HAL_RCC_OscConfig+0x44a>
 800120c:	4ba0      	ldr	r3, [pc, #640]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d16c      	bne.n	80012f2 <HAL_RCC_OscConfig+0x44a>
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800122a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	fab3 f383 	clz	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	095b      	lsrs	r3, r3, #5
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <HAL_RCC_OscConfig+0x3a0>
 8001242:	4b93      	ldr	r3, [pc, #588]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	e013      	b.n	8001270 <HAL_RCC_OscConfig+0x3c8>
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001260:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800126c:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	2202      	movs	r2, #2
 8001272:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001276:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800127a:	fa92 f2a2 	rbit	r2, r2
 800127e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001282:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001286:	fab2 f282 	clz	r2, r2
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	f002 021f 	and.w	r2, r2, #31
 8001296:	2101      	movs	r1, #1
 8001298:	fa01 f202 	lsl.w	r2, r1, r2
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00a      	beq.n	80012b8 <HAL_RCC_OscConfig+0x410>
 80012a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d002      	beq.n	80012b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f000 be2e 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b8:	4b75      	ldr	r3, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	21f8      	movs	r1, #248	; 0xf8
 80012ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012d6:	fa91 f1a1 	rbit	r1, r1
 80012da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012e2:	fab1 f181 	clz	r1, r1
 80012e6:	b2c9      	uxtb	r1, r1
 80012e8:	408b      	lsls	r3, r1
 80012ea:	4969      	ldr	r1, [pc, #420]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f0:	e0fd      	b.n	80014ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8088 	beq.w	8001414 <HAL_RCC_OscConfig+0x56c>
 8001304:	2301      	movs	r3, #1
 8001306:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001316:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001324:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	461a      	mov	r2, r3
 800132c:	2301      	movs	r3, #1
 800132e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fb3e 	bl	80009b0 <HAL_GetTick>
 8001334:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fb39 	bl	80009b0 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d902      	bls.n	8001350 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	f000 bde2 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001362:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	095b      	lsrs	r3, r3, #5
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b01      	cmp	r3, #1
 8001378:	d102      	bne.n	8001380 <HAL_RCC_OscConfig+0x4d8>
 800137a:	4b45      	ldr	r3, [pc, #276]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	e013      	b.n	80013a8 <HAL_RCC_OscConfig+0x500>
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001398:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2202      	movs	r2, #2
 80013aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013b2:	fa92 f2a2 	rbit	r2, r2
 80013b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013be:	fab2 f282 	clz	r2, r2
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	f042 0220 	orr.w	r2, r2, #32
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	f002 021f 	and.w	r2, r2, #31
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f202 	lsl.w	r2, r1, r2
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0af      	beq.n	800133a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	21f8      	movs	r1, #248	; 0xf8
 80013f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013f8:	fa91 f1a1 	rbit	r1, r1
 80013fc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001400:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001404:	fab1 f181 	clz	r1, r1
 8001408:	b2c9      	uxtb	r1, r1
 800140a:	408b      	lsls	r3, r1
 800140c:	4920      	ldr	r1, [pc, #128]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
 8001412:	e06c      	b.n	80014ee <HAL_RCC_OscConfig+0x646>
 8001414:	2301      	movs	r3, #1
 8001416:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001426:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001434:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	461a      	mov	r2, r3
 800143c:	2300      	movs	r3, #0
 800143e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fab6 	bl	80009b0 <HAL_GetTick>
 8001444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fab1 	bl	80009b0 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d902      	bls.n	8001460 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	f000 bd5a 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001466:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	fab3 f383 	clz	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	095b      	lsrs	r3, r3, #5
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d104      	bne.n	8001494 <HAL_RCC_OscConfig+0x5ec>
 800148a:	4b01      	ldr	r3, [pc, #4]	; (8001490 <HAL_RCC_OscConfig+0x5e8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	e015      	b.n	80014bc <HAL_RCC_OscConfig+0x614>
 8001490:	40021000 	.word	0x40021000
 8001494:	2302      	movs	r3, #2
 8001496:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014b8:	4bc8      	ldr	r3, [pc, #800]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	2202      	movs	r2, #2
 80014be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014c6:	fa92 f2a2 	rbit	r2, r2
 80014ca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	f042 0220 	orr.w	r2, r2, #32
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f002 021f 	and.w	r2, r2, #31
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ad      	bne.n	800144a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8110 	beq.w	8001724 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d079      	beq.n	8001608 <HAL_RCC_OscConfig+0x760>
 8001514:	2301      	movs	r3, #1
 8001516:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	4bab      	ldr	r3, [pc, #684]	; (80017e0 <HAL_RCC_OscConfig+0x938>)
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	461a      	mov	r2, r3
 800153a:	2301      	movs	r3, #1
 800153c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fa37 	bl	80009b0 <HAL_GetTick>
 8001542:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e00a      	b.n	800155e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff fa32 	bl	80009b0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d902      	bls.n	800155e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	f000 bcdb 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001568:	fa93 f3a3 	rbit	r3, r3
 800156c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001574:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001578:	2202      	movs	r2, #2
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fa93 f2a3 	rbit	r2, r3
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b8:	4b88      	ldr	r3, [pc, #544]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 80015ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015c4:	2102      	movs	r1, #2
 80015c6:	6019      	str	r1, [r3, #0]
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f1a3 	rbit	r1, r3
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015de:	6019      	str	r1, [r3, #0]
  return result;
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0a0      	beq.n	8001548 <HAL_RCC_OscConfig+0x6a0>
 8001606:	e08d      	b.n	8001724 <HAL_RCC_OscConfig+0x87c>
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fa93 f2a3 	rbit	r2, r3
 8001622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001626:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800162a:	601a      	str	r2, [r3, #0]
  return result;
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001634:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_OscConfig+0x938>)
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	461a      	mov	r2, r3
 8001646:	2300      	movs	r3, #0
 8001648:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f9b1 	bl	80009b0 <HAL_GetTick>
 800164e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff f9ac 	bl	80009b0 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d902      	bls.n	800166a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	f000 bc55 	b.w	8001f14 <HAL_RCC_OscConfig+0x106c>
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d6:	4b41      	ldr	r3, [pc, #260]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 80016d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016e2:	2102      	movs	r1, #2
 80016e4:	6019      	str	r1, [r3, #0]
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f1a3 	rbit	r1, r3
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016fc:	6019      	str	r1, [r3, #0]
  return result;
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d197      	bne.n	8001654 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 81a1 	beq.w	8001a7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d116      	bne.n	800177a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001756:	61d3      	str	r3, [r2, #28]
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001772:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_RCC_OscConfig+0x93c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11a      	bne.n	80017bc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_RCC_OscConfig+0x93c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_RCC_OscConfig+0x93c>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff f90d 	bl	80009b0 <HAL_GetTick>
 8001796:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	e009      	b.n	80017b0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179c:	f7ff f908 	bl	80009b0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	; 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e3b1      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_RCC_OscConfig+0x93c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ef      	beq.n	800179c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10d      	bne.n	80017e8 <HAL_RCC_OscConfig+0x940>
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a02      	ldr	r2, [pc, #8]	; (80017dc <HAL_RCC_OscConfig+0x934>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	e03c      	b.n	8001854 <HAL_RCC_OscConfig+0x9ac>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	10908120 	.word	0x10908120
 80017e4:	40007000 	.word	0x40007000
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x96a>
 80017f8:	4bc1      	ldr	r3, [pc, #772]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4ac0      	ldr	r2, [pc, #768]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	4bbe      	ldr	r3, [pc, #760]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4abd      	ldr	r2, [pc, #756]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e020      	b.n	8001854 <HAL_RCC_OscConfig+0x9ac>
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x994>
 8001822:	4bb7      	ldr	r3, [pc, #732]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4ab6      	ldr	r2, [pc, #728]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4ab3      	ldr	r2, [pc, #716]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0x9ac>
 800183c:	4bb0      	ldr	r3, [pc, #704]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4aaf      	ldr	r2, [pc, #700]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	4bad      	ldr	r3, [pc, #692]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4aac      	ldr	r2, [pc, #688]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 800184e:	f023 0304 	bic.w	r3, r3, #4
 8001852:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8081 	beq.w	8001968 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff f8a3 	bl	80009b0 <HAL_GetTick>
 800186a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff f89e 	bl	80009b0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e345      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001890:	2202      	movs	r2, #2
 8001892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018b4:	2202      	movs	r2, #2
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018ce:	601a      	str	r2, [r3, #0]
  return result;
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f043 0302 	orr.w	r3, r3, #2
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0xa4c>
 80018ee:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	e013      	b.n	800191c <HAL_RCC_OscConfig+0xa74>
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018fc:	2202      	movs	r2, #2
 80018fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001920:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001924:	2102      	movs	r1, #2
 8001926:	6011      	str	r1, [r2, #0]
 8001928:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800192c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	fa92 f1a2 	rbit	r1, r2
 8001936:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800193e:	6011      	str	r1, [r2, #0]
  return result;
 8001940:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001944:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f002 021f 	and.w	r2, r2, #31
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f202 	lsl.w	r2, r1, r2
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d084      	beq.n	8001870 <HAL_RCC_OscConfig+0x9c8>
 8001966:	e07f      	b.n	8001a68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff f822 	bl	80009b0 <HAL_GetTick>
 800196c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff f81d 	bl	80009b0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e2c4      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001992:	2202      	movs	r2, #2
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	fa93 f2a3 	rbit	r2, r3
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	fa93 f2a3 	rbit	r2, r3
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019d0:	601a      	str	r2, [r3, #0]
  return result;
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d102      	bne.n	80019f6 <HAL_RCC_OscConfig+0xb4e>
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	e013      	b.n	8001a1e <HAL_RCC_OscConfig+0xb76>
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019fe:	2202      	movs	r2, #2
 8001a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a26:	2102      	movs	r1, #2
 8001a28:	6011      	str	r1, [r2, #0]
 8001a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fa92 f1a2 	rbit	r1, r2
 8001a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a40:	6011      	str	r1, [r2, #0]
  return result;
 8001a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f002 021f 	and.w	r2, r2, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d184      	bne.n	8001972 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8242 	beq.w	8001f12 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_RCC_OscConfig+0xc58>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	f000 8213 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	f040 8162 	bne.w	8001d72 <HAL_RCC_OscConfig+0xeca>
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ab6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ad2:	601a      	str	r2, [r3, #0]
  return result;
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001adc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	461a      	mov	r2, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7fe ff5c 	bl	80009b0 <HAL_GetTick>
 8001af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	e00c      	b.n	8001b18 <HAL_RCC_OscConfig+0xc70>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7fe ff54 	bl	80009b0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1fd      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b3c:	601a      	str	r2, [r3, #0]
  return result;
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0xcba>
 8001b5c:	4bb0      	ldr	r3, [pc, #704]	; (8001e20 <HAL_RCC_OscConfig+0xf78>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	e027      	b.n	8001bb2 <HAL_RCC_OscConfig+0xd0a>
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b9c      	ldr	r3, [pc, #624]	; (8001e20 <HAL_RCC_OscConfig+0xf78>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bbe:	6011      	str	r1, [r2, #0]
 8001bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fa92 f1a2 	rbit	r1, r2
 8001bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bd6:	6011      	str	r1, [r2, #0]
  return result;
 8001bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bdc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d182      	bne.n	8001b04 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfe:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0xf78>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	497f      	ldr	r1, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0xf78>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c4a:	601a      	str	r2, [r3, #0]
  return result;
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c54:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	461a      	mov	r2, r3
 8001c68:	2301      	movs	r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe fea0 	bl	80009b0 <HAL_GetTick>
 8001c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe fe9b 	bl	80009b0 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e144      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cae:	601a      	str	r2, [r3, #0]
  return result;
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xe2c>
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <HAL_RCC_OscConfig+0xf78>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e027      	b.n	8001d24 <HAL_RCC_OscConfig+0xe7c>
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0xf78>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d28:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d30:	6011      	str	r1, [r2, #0]
 8001d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d36:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	fa92 f1a2 	rbit	r1, r2
 8001d40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d44:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d48:	6011      	str	r1, [r2, #0]
  return result;
 8001d4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d4e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	fab2 f282 	clz	r2, r2
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f002 021f 	and.w	r2, r2, #31
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d082      	beq.n	8001c76 <HAL_RCC_OscConfig+0xdce>
 8001d70:	e0cf      	b.n	8001f12 <HAL_RCC_OscConfig+0x106a>
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d96:	601a      	str	r2, [r3, #0]
  return result;
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001da0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	461a      	mov	r2, r3
 8001db4:	2300      	movs	r3, #0
 8001db6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe fdfa 	bl	80009b0 <HAL_GetTick>
 8001dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7fe fdf5 	bl	80009b0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e09e      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fa93 f2a3 	rbit	r2, r3
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dfa:	601a      	str	r2, [r3, #0]
  return result;
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d104      	bne.n	8001e24 <HAL_RCC_OscConfig+0xf7c>
 8001e1a:	4b01      	ldr	r3, [pc, #4]	; (8001e20 <HAL_RCC_OscConfig+0xf78>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e029      	b.n	8001e74 <HAL_RCC_OscConfig+0xfcc>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_RCC_OscConfig+0x1078>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e78:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e80:	6011      	str	r1, [r2, #0]
 8001e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e86:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fa92 f1a2 	rbit	r1, r2
 8001e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e94:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e98:	6011      	str	r1, [r2, #0]
  return result;
 8001e9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d180      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf1a>
 8001ec0:	e027      	b.n	8001f12 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e01e      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_OscConfig+0x1078>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ede:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ee2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d10b      	bne.n	8001f0e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b09e      	sub	sp, #120	; 0x78
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e162      	b.n	8002202 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b90      	ldr	r3, [pc, #576]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	498b      	ldr	r1, [pc, #556]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b89      	ldr	r3, [pc, #548]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e14a      	b.n	8002202 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b82      	ldr	r3, [pc, #520]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	497f      	ldr	r1, [pc, #508]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80dc 	beq.w	8002150 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d13c      	bne.n	800201a <HAL_RCC_ClockConfig+0xf6>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_ClockConfig+0xa6>
 8001fc4:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	e00f      	b.n	8001fea <HAL_RCC_ClockConfig+0xc6>
 8001fca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8001fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8001fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fee:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ff2:	fa92 f2a2 	rbit	r2, r2
 8001ff6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f002 021f 	and.w	r2, r2, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d17b      	bne.n	800210e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0f3      	b.n	8002202 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d13c      	bne.n	800209c <HAL_RCC_ClockConfig+0x178>
 8002022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002026:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d102      	bne.n	800204c <HAL_RCC_ClockConfig+0x128>
 8002046:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e00f      	b.n	800206c <HAL_RCC_ClockConfig+0x148>
 800204c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002050:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	647b      	str	r3, [r7, #68]	; 0x44
 800205a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205e:	643b      	str	r3, [r7, #64]	; 0x40
 8002060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002068:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002070:	63ba      	str	r2, [r7, #56]	; 0x38
 8002072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800207a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f002 021f 	and.w	r2, r2, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d13a      	bne.n	800210e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b2      	b.n	8002202 <HAL_RCC_ClockConfig+0x2de>
 800209c:	2302      	movs	r3, #2
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x1a0>
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e00d      	b.n	80020e0 <HAL_RCC_ClockConfig+0x1bc>
 80020c4:	2302      	movs	r3, #2
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
 80020d0:	2302      	movs	r3, #2
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	2202      	movs	r2, #2
 80020e2:	61ba      	str	r2, [r7, #24]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	fa92 f2a2 	rbit	r2, r2
 80020ea:	617a      	str	r2, [r7, #20]
  return result;
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	fab2 f282 	clz	r2, r2
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	f042 0220 	orr.w	r2, r2, #32
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	f002 021f 	and.w	r2, r2, #31
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e079      	b.n	8002202 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 0203 	bic.w	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	491a      	ldr	r1, [pc, #104]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002120:	f7fe fc46 	bl	80009b0 <HAL_GetTick>
 8002124:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	e00a      	b.n	800213e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002128:	f7fe fc42 	bl	80009b0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e061      	b.n	8002202 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_ClockConfig+0x260>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 020c 	and.w	r2, r3, #12
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	429a      	cmp	r2, r3
 800214e:	d1eb      	bne.n	8002128 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d214      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 0207 	bic.w	r2, r3, #7
 8002166:	4906      	ldr	r1, [pc, #24]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <HAL_RCC_ClockConfig+0x25c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e040      	b.n	8002202 <HAL_RCC_ClockConfig+0x2de>
 8002180:	40022000 	.word	0x40022000
 8002184:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCC_ClockConfig+0x2e8>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	491a      	ldr	r1, [pc, #104]	; (800220c <HAL_RCC_ClockConfig+0x2e8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_RCC_ClockConfig+0x2e8>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4912      	ldr	r1, [pc, #72]	; (800220c <HAL_RCC_ClockConfig+0x2e8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021c6:	f000 f829 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021ca:	4601      	mov	r1, r0
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_RCC_ClockConfig+0x2e8>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d4:	22f0      	movs	r2, #240	; 0xf0
 80021d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	60fa      	str	r2, [r7, #12]
  return result;
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	fab2 f282 	clz	r2, r2
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	40d3      	lsrs	r3, r2
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x2ec>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	fa21 f303 	lsr.w	r3, r1, r3
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_RCC_ClockConfig+0x2f0>)
 80021f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_RCC_ClockConfig+0x2f4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fb94 	bl	8000928 <HAL_InitTick>
  
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3778      	adds	r7, #120	; 0x78
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	08002384 	.word	0x08002384
 8002214:	20000000 	.word	0x20000000
 8002218:	20000008 	.word	0x20000008

0800221c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b08b      	sub	sp, #44	; 0x2c
 8002220:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b04      	cmp	r3, #4
 8002244:	d002      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x30>
 8002246:	2b08      	cmp	r3, #8
 8002248:	d003      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x36>
 800224a:	e03c      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800224e:	623b      	str	r3, [r7, #32]
      break;
 8002250:	e03c      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002258:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800225c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	607a      	str	r2, [r7, #4]
  return result;
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	40d3      	lsrs	r3, r2
 8002270:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	220f      	movs	r2, #15
 8002280:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	60fa      	str	r2, [r7, #12]
  return result;
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	40d3      	lsrs	r3, r2
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
 80022b4:	e004      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	623b      	str	r3, [r7, #32]
      break;
 80022c4:	e002      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022c8:	623b      	str	r3, [r7, #32]
      break;
 80022ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022cc:	6a3b      	ldr	r3, [r7, #32]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	372c      	adds	r7, #44	; 0x2c
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	007a1200 	.word	0x007a1200
 80022e4:	08002394 	.word	0x08002394
 80022e8:	080023a4 	.word	0x080023a4
 80022ec:	003d0900 	.word	0x003d0900

080022f0 <memset>:
 80022f0:	4402      	add	r2, r0
 80022f2:	4603      	mov	r3, r0
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d100      	bne.n	80022fa <memset+0xa>
 80022f8:	4770      	bx	lr
 80022fa:	f803 1b01 	strb.w	r1, [r3], #1
 80022fe:	e7f9      	b.n	80022f4 <memset+0x4>

08002300 <__libc_init_array>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4d0d      	ldr	r5, [pc, #52]	; (8002338 <__libc_init_array+0x38>)
 8002304:	4c0d      	ldr	r4, [pc, #52]	; (800233c <__libc_init_array+0x3c>)
 8002306:	1b64      	subs	r4, r4, r5
 8002308:	10a4      	asrs	r4, r4, #2
 800230a:	2600      	movs	r6, #0
 800230c:	42a6      	cmp	r6, r4
 800230e:	d109      	bne.n	8002324 <__libc_init_array+0x24>
 8002310:	4d0b      	ldr	r5, [pc, #44]	; (8002340 <__libc_init_array+0x40>)
 8002312:	4c0c      	ldr	r4, [pc, #48]	; (8002344 <__libc_init_array+0x44>)
 8002314:	f000 f818 	bl	8002348 <_init>
 8002318:	1b64      	subs	r4, r4, r5
 800231a:	10a4      	asrs	r4, r4, #2
 800231c:	2600      	movs	r6, #0
 800231e:	42a6      	cmp	r6, r4
 8002320:	d105      	bne.n	800232e <__libc_init_array+0x2e>
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	f855 3b04 	ldr.w	r3, [r5], #4
 8002328:	4798      	blx	r3
 800232a:	3601      	adds	r6, #1
 800232c:	e7ee      	b.n	800230c <__libc_init_array+0xc>
 800232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002332:	4798      	blx	r3
 8002334:	3601      	adds	r6, #1
 8002336:	e7f2      	b.n	800231e <__libc_init_array+0x1e>
 8002338:	080023b4 	.word	0x080023b4
 800233c:	080023b4 	.word	0x080023b4
 8002340:	080023b4 	.word	0x080023b4
 8002344:	080023b8 	.word	0x080023b8

08002348 <_init>:
 8002348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234a:	bf00      	nop
 800234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234e:	bc08      	pop	{r3}
 8002350:	469e      	mov	lr, r3
 8002352:	4770      	bx	lr

08002354 <_fini>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	bf00      	nop
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr
