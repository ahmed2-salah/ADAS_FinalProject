
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002670  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002864  08002864  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002864  08002864  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002864  08002864  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002864  08002864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002868  08002868  00012868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800286c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000020  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000491e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010d9  00000000  00000000  000249a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000480  00000000  00000000  00025a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000033d  00000000  00000000  00025f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019127  00000000  00000000  0002623d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000060b8  00000000  00000000  0003f364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00092710  00000000  00000000  0004541c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000100c  00000000  00000000  000d7b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000d8b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027e0 	.word	0x080027e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080027e0 	.word	0x080027e0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b09a      	sub	sp, #104	; 0x68
 80001cc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80001ce:	f000 fde1 	bl	8000d94 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f86b 	bl	80002ac <SystemClock_Config>



  /* Initialize all configured peripherals */

  HAL_CAN_MspInit();
 80001d6:	f000 f901 	bl	80003dc <HAL_CAN_MspInit>
  MX_GPIO_Init();
 80001da:	f000 f8a3 	bl	8000324 <MX_GPIO_Init>
  //MX_CAN_Init();
  S_CAN_INIT_CONFIG initConfig={LOOPBACK_SILENT_MODE,ENABLE,DISABLE,DISABLE,ENABLE,DISABLE};
 80001de:	4a2e      	ldr	r2, [pc, #184]	; (8000298 <main+0xd0>)
 80001e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001e8:	6018      	str	r0, [r3, #0]
 80001ea:	3304      	adds	r3, #4
 80001ec:	8019      	strh	r1, [r3, #0]
  S_CAN_BITIME_CONFIG bitime={PRESCALER_32,TS1_Q,TS2_Q};
 80001ee:	4b2b      	ldr	r3, [pc, #172]	; (800029c <main+0xd4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_filterxConfig FILTERX_CONFIG={MSK_MODE,SINGLE_32,FIFO0,ENABLE,0X0000,0X123<<5,0X0000,0X123<<5,10};
 80001f4:	4b2a      	ldr	r3, [pc, #168]	; (80002a0 <main+0xd8>)
 80001f6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80001fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  S_CAN_TXFRAME TX_FRAME={STD_ID,0X123,0,1,8,DISABLE};
 8000200:	4b28      	ldr	r3, [pc, #160]	; (80002a4 <main+0xdc>)
 8000202:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000206:	461d      	mov	r5, r3
 8000208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000210:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t DATA_TX[8]={'H','E','L','L','O','.','.','.'};
 8000214:	4a24      	ldr	r2, [pc, #144]	; (80002a8 <main+0xe0>)
 8000216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800021a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t MAILBOX_CODE;
  /*initialize the can */
  HAL_CAN_vInit(&initConfig,&bitime);
 8000222:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000226:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800022a:	4611      	mov	r1, r2
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fa31 	bl	8000694 <HAL_CAN_vInit>
  /*set debuging mode (loopback)*/
  HAL_CAN_vDebugMode(&initConfig);
 8000232:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f9e0 	bl	80005fc <HAL_CAN_vDebugMode>
  /*set RX filter configuration*/
  HAL_CAN_FILTER_CONFIG(&FILTERX_CONFIG);
 800023c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fbd1 	bl	80009e8 <HAL_CAN_FILTER_CONFIG>
  /*acquire an access on the CAN bus */
  HAL_CAN_start();
 8000246:	f000 fa9f 	bl	8000788 <HAL_CAN_start>
  /*prepare the TX frame and send*/
  HAL_CAN_pu8TXFRAME(&initConfig,&TX_FRAME, DATA_TX, & MAILBOX_CODE);
 800024a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800024e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000252:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000256:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800025a:	f000 fa9d 	bl	8000798 <HAL_CAN_pu8TXFRAME>

  uint8_t status;
  do
  {		//wait until data is no longer pending
	  HAL_CAN_u8IS_TXFRAME_PENDING(&status,MAILBOX_CODE);
 800025e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000262:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000266:	4611      	mov	r1, r2
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fb97 	bl	800099c <HAL_CAN_u8IS_TXFRAME_PENDING>
  }
  while(status==1);
 800026e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000272:	2b01      	cmp	r3, #1
 8000274:	d0f3      	beq.n	800025e <main+0x96>
  S_CAN_RXFRAME RX_FRAME;
  uint8_t DATA_RX[8];
  uint8_t FRAMES_NUM;
 do
 {	//receive the data in FIFO0 queue
	 HAL_CAN_psRXFRAME(&RX_FRAME, DATA_RX,FIFO0);
 8000276:	f107 0108 	add.w	r1, r7, #8
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fc85 	bl	8000b90 <HAL_CAN_psRXFRAME>
	 //wait until FIFO0 no longer carry frames
	 HAL_CAN_RX_FRAMES_NUM(FIFO0,&FRAMES_NUM);
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	4619      	mov	r1, r3
 800028a:	2000      	movs	r0, #0
 800028c:	f000 fd5e 	bl	8000d4c <HAL_CAN_RX_FRAMES_NUM>

 }while(FRAMES_NUM!=0);
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1ef      	bne.n	8000276 <main+0xae>
 if(DATA_RX[0]=='A')
 {
	 LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
 }*/
 /* USER CODE END SysInit */
  while (1)
 8000296:	e7fe      	b.n	8000296 <main+0xce>
 8000298:	080027f8 	.word	0x080027f8
 800029c:	08002800 	.word	0x08002800
 80002a0:	08002804 	.word	0x08002804
 80002a4:	08002814 	.word	0x08002814
 80002a8:	0800282c 	.word	0x0800282c

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	; 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fa64 	bl	8002788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;//internal RC clk
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002da:	2300      	movs	r3, #0
 80002dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 f82c 	bl	8001340 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ee:	f000 f84b 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 f856 	bl	80023bc <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000316:	f000 f837 	bl	8000388 <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	; 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_GPIO_Init+0x60>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a11      	ldr	r2, [pc, #68]	; (8000384 <MX_GPIO_Init+0x60>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6153      	str	r3, [r2, #20]
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_GPIO_Init+0x60>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f000 ffd9 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800035e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2300      	movs	r3, #0
 800036e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	4619      	mov	r1, r3
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f000 fe58 	bl	800102c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	e7fe      	b.n	8000390 <Error_Handler+0x8>
	...

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_MspInit+0x44>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <HAL_MspInit+0x44>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <HAL_MspInit+0x44>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <HAL_MspInit+0x44>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <HAL_MspInit+0x44>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <HAL_MspInit+0x44>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
  {*/
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <HAL_CAN_MspInit+0x74>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a16      	ldr	r2, [pc, #88]	; (8000450 <HAL_CAN_MspInit+0x74>)
 80003f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <HAL_CAN_MspInit+0x74>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <HAL_CAN_MspInit+0x74>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a10      	ldr	r2, [pc, #64]	; (8000450 <HAL_CAN_MspInit+0x74>)
 8000410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_CAN_MspInit+0x74>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000422:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000426:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000428:	2302      	movs	r3, #2
 800042a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000430:	2303      	movs	r3, #3
 8000432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000434:	2309      	movs	r3, #9
 8000436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	4619      	mov	r1, r3
 800043e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000442:	f000 fdf3 	bl	800102c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  //}

}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 fcbe 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <SystemInit+0x20>)
 80004ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004b2:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <SystemInit+0x20>)
 80004b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d0:	f7ff ffea 	bl	80004a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <LoopForever+0x6>)
  ldr r1, =_edata
 80004d6:	490d      	ldr	r1, [pc, #52]	; (800050c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <LoopForever+0xe>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004ec:	4c0a      	ldr	r4, [pc, #40]	; (8000518 <LoopForever+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fa:	f002 f94d 	bl	8002798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004fe:	f7ff fe63 	bl	80001c8 <main>

08000502 <LoopForever>:

LoopForever:
    b LoopForever
 8000502:	e7fe      	b.n	8000502 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000504:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000510:	0800286c 	.word	0x0800286c
  ldr r2, =_sbss
 8000514:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000518:	20000030 	.word	0x20000030

0800051c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC1_2_IRQHandler>
	...

08000520 <HAL_CAN_LEAVE_SLEEP_MODE>:
}



void HAL_CAN_LEAVE_SLEEP_MODE(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_SLEEP);
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f022 0202 	bic.w	r2, r2, #2
 8000532:	601a      	str	r2, [r3, #0]
	while((READ_BIT(CAN_INSTANCE->MSR,CAN_MSR_SLAK)>>CAN_MSR_SLAK_Pos)==HIGH);
 8000534:	bf00      	nop
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <HAL_CAN_LEAVE_SLEEP_MODE+0x34>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	085b      	lsrs	r3, r3, #1
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b01      	cmp	r3, #1
 8000544:	d0f7      	beq.n	8000536 <HAL_CAN_LEAVE_SLEEP_MODE+0x16>
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000004 	.word	0x20000004

08000558 <HAL_CAN_ENTER_INIT_MODE>:



void HAL_CAN_ENTER_INIT_MODE(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

	//for software initialization
	SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//SET INREQ BIT
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f042 0201 	orr.w	r2, r2, #1
 800056a:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG RAISING
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK_Pos)==LOW);
 800056c:	bf00      	nop
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <HAL_CAN_ENTER_INIT_MODE+0x2c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f8      	beq.n	800056e <HAL_CAN_ENTER_INIT_MODE+0x16>
	//LEAVE SLEEP MODE
	HAL_CAN_LEAVE_SLEEP_MODE();
 800057c:	f7ff ffd0 	bl	8000520 <HAL_CAN_LEAVE_SLEEP_MODE>

	//ALL MASSAGES TO AND FROM THE CAN BUS ARE STOPPED
	//OUTPUT OF CANTX=1	RECESSIVE
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000004 	.word	0x20000004

08000588 <HAL_CAN_LEAVE_INIT_MODE>:



void HAL_CAN_LEAVE_INIT_MODE(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_INRQ);//CLEAR INREQ BIT
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f022 0201 	bic.w	r2, r2, #1
 800059a:	601a      	str	r2, [r3, #0]
	//WAIT FOR THE FLAG TO FALL
	while((READ_BIT(CAN_INSTANCE->MSR, CAN_MSR_INAK)>>CAN_MSR_INAK_Pos)==HIGH);
 800059c:	bf00      	nop
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_CAN_LEAVE_INIT_MODE+0x30>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d0f8      	beq.n	800059e <HAL_CAN_LEAVE_INIT_MODE+0x16>
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_CAN_vsetbiTime>:



void HAL_CAN_vsetbiTime(S_CAN_BITIME_CONFIG* bitime)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	//HAL_CAN_ENTER_INIT_MODE();
	WRITE_REG(CAN_INSTANCE->BTR,((CAN_INSTANCE->BTR&0XFF000000)|(uint32_t)(bitime->prescaler<<CAN_BTR_BRP_Pos)|(uint32_t)(bitime->TS1_Qunata<<CAN_BTR_TS1_Pos)|(uint32_t)(bitime->TS2_Qunata<<CAN_BTR_TS2_Pos)));
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_CAN_vsetbiTime+0x3c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	8812      	ldrh	r2, [r2, #0]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7892      	ldrb	r2, [r2, #2]
 80005d8:	0412      	lsls	r2, r2, #16
 80005da:	431a      	orrs	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	78db      	ldrb	r3, [r3, #3]
 80005e0:	051b      	lsls	r3, r3, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_CAN_vsetbiTime+0x3c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	430a      	orrs	r2, r1
 80005ea:	61da      	str	r2, [r3, #28]
};
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	20000004 	.word	0x20000004

080005fc <HAL_CAN_vDebugMode>:

void HAL_CAN_vDebugMode(S_CAN_INIT_CONFIG* initConfig)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	HAL_CAN_ENTER_INIT_MODE();
 8000604:	f7ff ffa8 	bl	8000558 <HAL_CAN_ENTER_INIT_MODE>
	switch((initConfig->debugMode))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b05      	cmp	r3, #5
 800060e:	d028      	beq.n	8000662 <HAL_CAN_vDebugMode+0x66>
 8000610:	2b05      	cmp	r3, #5
 8000612:	dc37      	bgt.n	8000684 <HAL_CAN_vDebugMode+0x88>
 8000614:	2b03      	cmp	r3, #3
 8000616:	d002      	beq.n	800061e <HAL_CAN_vDebugMode+0x22>
 8000618:	2b04      	cmp	r3, #4
 800061a:	d011      	beq.n	8000640 <HAL_CAN_vDebugMode+0x44>
						   break;
		case LOOPBACK_SILENT_MODE:SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
								  SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
								  break;
		default:
				break;
 800061c:	e032      	b.n	8000684 <HAL_CAN_vDebugMode+0x88>
		case SILENT_MODE:SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800062c:	61da      	str	r2, [r3, #28]
			   	   	   	 CLEAR_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	69da      	ldr	r2, [r3, #28]
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800063c:	61da      	str	r2, [r3, #28]
			   	   	   	 break;
 800063e:	e022      	b.n	8000686 <HAL_CAN_vDebugMode+0x8a>
		case LOOPBACK_MODE:CLEAR_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	69da      	ldr	r2, [r3, #28]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800064e:	61da      	str	r2, [r3, #28]
						   SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	69da      	ldr	r2, [r3, #28]
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800065e:	61da      	str	r2, [r3, #28]
						   break;
 8000660:	e011      	b.n	8000686 <HAL_CAN_vDebugMode+0x8a>
		case LOOPBACK_SILENT_MODE:SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_SILM);
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000670:	61da      	str	r2, [r3, #28]
								  SET_BIT(CAN_INSTANCE->BTR,CAN_BTR_LBKM);
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	69da      	ldr	r2, [r3, #28]
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_CAN_vDebugMode+0x94>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000680:	61da      	str	r2, [r3, #28]
								  break;
 8000682:	e000      	b.n	8000686 <HAL_CAN_vDebugMode+0x8a>
				break;
 8000684:	bf00      	nop
		}
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_CAN_vInit>:

void HAL_CAN_vInit(S_CAN_INIT_CONFIG* initConfig,S_CAN_BITIME_CONFIG* bitime)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	HAL_CAN_ENTER_INIT_MODE();
 800069e:	f7ff ff5b 	bl	8000558 <HAL_CAN_ENTER_INIT_MODE>
/**************************************************************/
	if(!initConfig->IDENTIFIER_PRIORITY)//FIFO Priority
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d108      	bne.n	80006bc <HAL_CAN_vInit+0x28>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f042 0204 	orr.w	r2, r2, #4
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e007      	b.n	80006cc <HAL_CAN_vInit+0x38>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_TXFP);
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f022 0204 	bic.w	r2, r2, #4
 80006ca:	601a      	str	r2, [r3, #0]
	}
/**************************************************************/

	if(!initConfig->AUTO_RETRANSMISSION)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	785b      	ldrb	r3, [r3, #1]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d108      	bne.n	80006e6 <HAL_CAN_vInit+0x52>
	{
		SET_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f042 0210 	orr.w	r2, r2, #16
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	e007      	b.n	80006f6 <HAL_CAN_vInit+0x62>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR, CAN_MCR_NART);
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <HAL_CAN_vInit+0xf0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f022 0210 	bic.w	r2, r2, #16
 80006f4:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->AUTO_BUSOFF_RECOVERY)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d008      	beq.n	8000710 <HAL_CAN_vInit+0x7c>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e007      	b.n	8000720 <HAL_CAN_vInit+0x8c>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_ABOM);
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800071e:	601a      	str	r2, [r3, #0]
	}
/************************************************************/
	if(initConfig->AUTO_WAKEUP_MODE)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d008      	beq.n	800073a <HAL_CAN_vInit+0xa6>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_CAN_vInit+0xf0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0220 	orr.w	r2, r2, #32
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	e007      	b.n	800074a <HAL_CAN_vInit+0xb6>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_AWUM);
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_CAN_vInit+0xf0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f022 0220 	bic.w	r2, r2, #32
 8000748:	601a      	str	r2, [r3, #0]
	}
/*************************************************************/
	if(initConfig->TIME_TRIG_COM==ENABLE)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d108      	bne.n	8000764 <HAL_CAN_vInit+0xd0>
	{
		SET_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_CAN_vInit+0xf0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	e007      	b.n	8000774 <HAL_CAN_vInit+0xe0>
	}
	else
	{
		CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_TTCM);
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <HAL_CAN_vInit+0xf0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_CAN_vInit+0xf0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000772:	601a      	str	r2, [r3, #0]
	}
	HAL_CAN_vsetbiTime(bitime);
 8000774:	6838      	ldr	r0, [r7, #0]
 8000776:	f7ff ff21 	bl	80005bc <HAL_CAN_vsetbiTime>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_CAN_start>:

void HAL_CAN_start(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	//ENTER THE NORMAL MODE
	HAL_CAN_LEAVE_INIT_MODE();
 800078c:	f7ff fefc 	bl	8000588 <HAL_CAN_LEAVE_INIT_MODE>
	HAL_CAN_LEAVE_SLEEP_MODE();
 8000790:	f7ff fec6 	bl	8000520 <HAL_CAN_LEAVE_SLEEP_MODE>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <HAL_CAN_pu8TXFRAME>:
void HAL_CAN_pu8TXFRAME(S_CAN_INIT_CONFIG* initConfig,S_CAN_TXFRAME* TX_FRAME, uint8_t DATA[], uint8_t* MAILBOX_CODE)
{
 8000798:	b490      	push	{r4, r7}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
	//CHECK IF ANY MAILBOX IS EMPTY
	if((READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME0)>>CAN_TSR_TME0_Pos)||(READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME1)>>CAN_TSR_TME1_Pos)||(READ_BIT(CAN_INSTANCE->TSR,CAN_TSR_TME2)>>CAN_TSR_TME2_Pos))
 80007a6:	4b7c      	ldr	r3, [pc, #496]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10e      	bne.n	80007d2 <HAL_CAN_pu8TXFRAME+0x3a>
 80007b4:	4b78      	ldr	r3, [pc, #480]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d107      	bne.n	80007d2 <HAL_CAN_pu8TXFRAME+0x3a>
 80007c2:	4b75      	ldr	r3, [pc, #468]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 80de 	beq.w	800098e <HAL_CAN_pu8TXFRAME+0x1f6>
	{
		//READ 2 MAILBOX CODE BITS
		*MAILBOX_CODE=(CAN_INSTANCE->TSR & CAN_TSR_CODE)>>CAN_TSR_CODE_Pos;
 80007d2:	4b71      	ldr	r3, [pc, #452]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	0e1b      	lsrs	r3, r3, #24
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	701a      	strb	r2, [r3, #0]

		/******************************************************************************************************************/
		//CHECK ID TYPE
		if(TX_FRAME->ID_TYPE==STD_ID)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d114      	bne.n	8000818 <HAL_CAN_pu8TXFRAME+0x80>
		{
			//fill all mailbox registers
			CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR=(TX_FRAME->ID_TYPE)|((TX_FRAME->StdId)<<STDID_Pos)|((TX_FRAME->RTR)>>RTR_Pos);
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	055b      	lsls	r3, r3, #21
 80007fa:	431a      	orrs	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	089b      	lsrs	r3, r3, #2
 8000802:	4965      	ldr	r1, [pc, #404]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 8000804:	6809      	ldr	r1, [r1, #0]
 8000806:	6838      	ldr	r0, [r7, #0]
 8000808:	7800      	ldrb	r0, [r0, #0]
 800080a:	431a      	orrs	r2, r3
 800080c:	f100 0318 	add.w	r3, r0, #24
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	440b      	add	r3, r1
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	e023      	b.n	8000860 <HAL_CAN_pu8TXFRAME+0xc8>
		}
		else
		{
			SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR,CAN_TI0R_IDE);
 8000818:	4b5f      	ldr	r3, [pc, #380]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3318      	adds	r3, #24
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	4413      	add	r3, r2
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a5b      	ldr	r2, [pc, #364]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 800082a:	6811      	ldr	r1, [r2, #0]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	7812      	ldrb	r2, [r2, #0]
 8000830:	4610      	mov	r0, r2
 8000832:	f043 0204 	orr.w	r2, r3, #4
 8000836:	f100 0318 	add.w	r3, r0, #24
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	440b      	add	r3, r1
 800083e:	601a      	str	r2, [r3, #0]
			CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR=((TX_FRAME->ExtId)>>EXTID_Pos)|((TX_FRAME->RTR)>>RTR_Pos);//fill all mailbox reigsters
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	08da      	lsrs	r2, r3, #3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	4952      	ldr	r1, [pc, #328]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 800084e:	6809      	ldr	r1, [r1, #0]
 8000850:	6838      	ldr	r0, [r7, #0]
 8000852:	7800      	ldrb	r0, [r0, #0]
 8000854:	431a      	orrs	r2, r3
 8000856:	f100 0318 	add.w	r3, r0, #24
 800085a:	011b      	lsls	r3, r3, #4
 800085c:	440b      	add	r3, r1
 800085e:	601a      	str	r2, [r3, #0]
		}
		/*****************************************************************************************************************/

		//SET DATA LENGTH
		CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR=(TX_FRAME->DLC & CAN_TDT0R_DLC);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	4a4c      	ldr	r2, [pc, #304]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 8000866:	6811      	ldr	r1, [r2, #0]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	4610      	mov	r0, r2
 800086e:	f003 020f 	and.w	r2, r3, #15
 8000872:	f100 0318 	add.w	r3, r0, #24
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	440b      	add	r3, r1
 800087a:	3304      	adds	r3, #4
 800087c:	601a      	str	r2, [r3, #0]

		/*****************************************************************************************************************/

		/* Set up the Transmit Global Time mode ONLY IN TIME TRIGGERED COMMUNICATION MODE WITH DLC=8 BYTES*/
		if((TX_FRAME->GLOBAL_TRANSMISSION==ENABLE)||(initConfig->TIME_TRIG_COM==ENABLE)||TX_FRAME->DLC==8UL)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	7d1b      	ldrb	r3, [r3, #20]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d007      	beq.n	8000896 <HAL_CAN_pu8TXFRAME+0xfe>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d003      	beq.n	8000896 <HAL_CAN_pu8TXFRAME+0xfe>
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2b08      	cmp	r3, #8
 8000894:	d116      	bne.n	80008c4 <HAL_CAN_pu8TXFRAME+0x12c>
		{
			SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR,CAN_TDT1R_TGT);
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3318      	adds	r3, #24
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	4413      	add	r3, r2
 80008a4:	3304      	adds	r3, #4
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a3b      	ldr	r2, [pc, #236]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 80008aa:	6811      	ldr	r1, [r2, #0]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	7812      	ldrb	r2, [r2, #0]
 80008b0:	4610      	mov	r0, r2
 80008b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008b6:	f100 0318 	add.w	r3, r0, #24
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	440b      	add	r3, r1
 80008be:	3304      	adds	r3, #4
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e015      	b.n	80008f0 <HAL_CAN_pu8TXFRAME+0x158>
		}
		else
		{
			CLEAR_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDTR,CAN_TDT1R_TGT);
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	3318      	adds	r3, #24
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	4413      	add	r3, r2
 80008d2:	3304      	adds	r3, #4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a30      	ldr	r2, [pc, #192]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 80008d8:	6811      	ldr	r1, [r2, #0]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	4610      	mov	r0, r2
 80008e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008e4:	f100 0318 	add.w	r3, r0, #24
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	440b      	add	r3, r1
 80008ec:	3304      	adds	r3, #4
 80008ee:	601a      	str	r2, [r3, #0]
		}

		/******************************************************************************************************************/
		 /* INCLUDE the PRELOAD DATA */
		//HIGHER BYTES
		      WRITE_REG(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDHR,
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3307      	adds	r3, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	061a      	lsls	r2, r3, #24
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3306      	adds	r3, #6
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	041b      	lsls	r3, r3, #16
 8000900:	431a      	orrs	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3305      	adds	r3, #5
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	4313      	orrs	r3, r2
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	3204      	adds	r2, #4
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	4614      	mov	r4, r2
 8000914:	4a20      	ldr	r2, [pc, #128]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 8000916:	6811      	ldr	r1, [r2, #0]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	4610      	mov	r0, r2
 800091e:	ea43 0204 	orr.w	r2, r3, r4
 8000922:	0103      	lsls	r3, r0, #4
 8000924:	440b      	add	r3, r1
 8000926:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800092a:	601a      	str	r2, [r3, #0]
		                ((uint32_t)DATA[7] << CAN_TDH0R_DATA7_Pos) |
		                ((uint32_t)DATA[6] << CAN_TDH0R_DATA6_Pos) |
		                ((uint32_t)DATA[5] << CAN_TDH0R_DATA5_Pos) |
		                ((uint32_t)DATA[4] << CAN_TDH0R_DATA4_Pos));
	    //LOWER BYTES
		      WRITE_REG(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TDLR,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3303      	adds	r3, #3
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	061a      	lsls	r2, r3, #24
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3302      	adds	r3, #2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	431a      	orrs	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3301      	adds	r3, #1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	4313      	orrs	r3, r2
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	7812      	ldrb	r2, [r2, #0]
 800094c:	4614      	mov	r4, r2
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 8000950:	6811      	ldr	r1, [r2, #0]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	4610      	mov	r0, r2
 8000958:	ea43 0204 	orr.w	r2, r3, r4
 800095c:	0103      	lsls	r3, r0, #4
 800095e:	440b      	add	r3, r1
 8000960:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000964:	601a      	str	r2, [r3, #0]
		                ((uint32_t)DATA[2] << CAN_TDL0R_DATA2_Pos) |
		                ((uint32_t)DATA[1] << CAN_TDL0R_DATA1_Pos) |
		                ((uint32_t)DATA[0] << CAN_TDL0R_DATA0_Pos));
		/******************************************************************************************************************/
		/* Request transmission */
        SET_BIT(CAN_INSTANCE->sTxMailBox[*MAILBOX_CODE].TIR, CAN_TI0R_TXRQ);
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	3318      	adds	r3, #24
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	4413      	add	r3, r2
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_CAN_pu8TXFRAME+0x200>)
 8000978:	6811      	ldr	r1, [r2, #0]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	4610      	mov	r0, r2
 8000980:	f043 0201 	orr.w	r2, r3, #1
 8000984:	f100 0318 	add.w	r3, r0, #24
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	440b      	add	r3, r1
 800098c:	601a      	str	r2, [r3, #0]

	}

}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bc90      	pop	{r4, r7}
 8000996:	4770      	bx	lr
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_CAN_u8IS_TXFRAME_PENDING>:
}



void HAL_CAN_u8IS_TXFRAME_PENDING(uint8_t* pendingStatus,uint8_t MAILBOX_CODE)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	*pendingStatus=1;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]

	uint32_t MASK= CAN_TSR_TME0<<MAILBOX_CODE;
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	60fb      	str	r3, [r7, #12]

	if((READ_BIT(CAN_INSTANCE->TSR,MASK)>>(MAILBOX_CODE+CAN_TSR_TME0_Pos))!=0)
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_CAN_u8IS_TXFRAME_PENDING+0x48>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	401a      	ands	r2, r3
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	331a      	adds	r3, #26
 80009c8:	fa22 f303 	lsr.w	r3, r2, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <HAL_CAN_u8IS_TXFRAME_PENDING+0x3a>
	{
		*pendingStatus=0;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
	}
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_CAN_FILTER_CONFIG>:
void HAL_CAN_RX_FIFO_DELOCKING()
{
	CLEAR_BIT(CAN_INSTANCE->MCR,CAN_MCR_RFLM);
}
void HAL_CAN_FILTER_CONFIG(s_filterxConfig* FRAMEX_CONFIG)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if(FRAMEX_CONFIG->filterBank<=13UL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	2b0d      	cmp	r3, #13
 80009f6:	f200 80c3 	bhi.w	8000b80 <HAL_CAN_FILTER_CONFIG+0x198>
	{
		//FILTER BANK INDEX MASK
		uint32_t filterIndexMsk=1UL<<(FRAMEX_CONFIG->filterBank);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	2201      	movs	r2, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	60fb      	str	r3, [r7, #12]

		/*****************************************************************************/
		//SET FINIT :FIFO INITIALIZATION MODE
		SET_BIT(CAN_INSTANCE->FMR,CAN_FMR_FINIT);
 8000a06:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000a0e:	4b5f      	ldr	r3, [pc, #380]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f042 0201 	orr.w	r2, r2, #1
 8000a16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		//DE-ACTIVATE THE FILTER BANK
		CLEAR_BIT(CAN_INSTANCE->FA1R,filterIndexMsk);
 8000a1a:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	43da      	mvns	r2, r3
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		/*****************************************************************************/
		//SET FILTER MODE
		if(FRAMEX_CONFIG->filterxMode==MSK_MODE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10b      	bne.n	8000a50 <HAL_CAN_FILTER_CONFIG+0x68>
		{
			CLEAR_BIT(CAN_INSTANCE->FM1R,filterIndexMsk);
 8000a38:	4b54      	ldr	r3, [pc, #336]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	43da      	mvns	r2, r3
 8000a44:	4b51      	ldr	r3, [pc, #324]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	400a      	ands	r2, r1
 8000a4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a4e:	e00d      	b.n	8000a6c <HAL_CAN_FILTER_CONFIG+0x84>
		}
		else if(FRAMEX_CONFIG->filterxMode==ID_MODE)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d109      	bne.n	8000a6c <HAL_CAN_FILTER_CONFIG+0x84>
		{
			SET_BIT(CAN_INSTANCE->FM1R,filterIndexMsk);
 8000a58:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000a60:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	430a      	orrs	r2, r1
 8000a68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			//parameter ERROR
		}
		/*****************************************************************************/
		//SET FILTER SCALE

		if(FRAMEX_CONFIG->filterxScale==DUAL_16)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d128      	bne.n	8000ac6 <HAL_CAN_FILTER_CONFIG+0xde>
		{	//shift by HIGH<<5 in case of STD_ID
			//shift by
			CLEAR_BIT(CAN_INSTANCE->FS1R,filterIndexMsk);
 8000a74:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	4b42      	ldr	r3, [pc, #264]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	400a      	ands	r2, r1
 8000a86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			//assign mask or identifier code based on your assigned FILTRATION MODE
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR1=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_LOW&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_LOW&0X0000FFFF);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	889b      	ldrh	r3, [r3, #4]
 8000a8e:	0419      	lsls	r1, r3, #16
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	891b      	ldrh	r3, [r3, #8]
 8000a94:	4618      	mov	r0, r3
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68d2      	ldr	r2, [r2, #12]
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	3248      	adds	r2, #72	; 0x48
 8000aa2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR2=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_HIGH&0X0000FFFF);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	88db      	ldrh	r3, [r3, #6]
 8000aaa:	041a      	lsls	r2, r3, #16
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	895b      	ldrh	r3, [r3, #10]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000ab4:	6819      	ldr	r1, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	4302      	orrs	r2, r0
 8000abc:	3348      	adds	r3, #72	; 0x48
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	e02a      	b.n	8000b1c <HAL_CAN_FILTER_CONFIG+0x134>

		}
		else if(FRAMEX_CONFIG->filterxScale==SINGLE_32)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	785b      	ldrb	r3, [r3, #1]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d126      	bne.n	8000b1c <HAL_CAN_FILTER_CONFIG+0x134>
		{	//shift by HIGH<<5 in case of STD_ID
			//shift by LOW<<3 in case of EXT_ID
			SET_BIT(CAN_INSTANCE->FS1R,filterIndexMsk);
 8000ace:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			//assign mask or identifier code based on your assigned FILTRATION MODE
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR1=(((uint32_t)FRAMEX_CONFIG->MSG_ID_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_LOW&0X0000FFFF);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	895b      	ldrh	r3, [r3, #10]
 8000ae6:	0419      	lsls	r1, r3, #16
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	891b      	ldrh	r3, [r3, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68d2      	ldr	r2, [r2, #12]
 8000af6:	4301      	orrs	r1, r0
 8000af8:	3248      	adds	r2, #72	; 0x48
 8000afa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			CAN_INSTANCE->sFilterRegister[FRAMEX_CONFIG->filterBank].FR2=(((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_HIGH&0X0000FFFF)<<16UL)|((uint32_t)FRAMEX_CONFIG->MSG_ID_MASK_LOW&0X0000FFFF);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	88db      	ldrh	r3, [r3, #6]
 8000b02:	041a      	lsls	r2, r3, #16
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	889b      	ldrh	r3, [r3, #4]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b0c:	6819      	ldr	r1, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	4302      	orrs	r2, r0
 8000b14:	3348      	adds	r3, #72	; 0x48
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	605a      	str	r2, [r3, #4]
		{
			//param ERROR
		}
		/******************************************************************************/
		//FILTER BANK FIFO ASSIGNATION
		if(FRAMEX_CONFIG->filterxAssign==FIFO0)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10b      	bne.n	8000b3c <HAL_CAN_FILTER_CONFIG+0x154>
		{
			CLEAR_BIT(CAN_INSTANCE->FFA1R,filterIndexMsk);
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	400a      	ands	r2, r1
 8000b36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b3a:	e00d      	b.n	8000b58 <HAL_CAN_FILTER_CONFIG+0x170>
		}
		else if(FRAMEX_CONFIG->filterxAssign==FIFO1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	789b      	ldrb	r3, [r3, #2]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d109      	bne.n	8000b58 <HAL_CAN_FILTER_CONFIG+0x170>
		{
			SET_BIT(CAN_INSTANCE->FFA1R,filterIndexMsk);
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	430a      	orrs	r2, r1
 8000b54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		{
			//param ERROR
		}
		/*******************************************************************************/
		//FILTER ACTIVATION
		SET_BIT(CAN_INSTANCE->FA1R,filterIndexMsk);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		//CLEAR FINIT TO EXIT FILTER INIT MODE
		CLEAR_BIT(CAN_INSTANCE->FMR,CAN_FMR_FINIT);
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_CAN_FILTER_CONFIG+0x1a4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0201 	bic.w	r2, r2, #1
 8000b7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	else
	{
		//parameter ERROR
	}
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_CAN_psRXFRAME>:

void HAL_CAN_psRXFRAME(S_CAN_RXFRAME* RX_FRAME, uint8_t DATA[],E_FILTER_ASSIGN RX_FIFO)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	71fb      	strb	r3, [r7, #7]

	RX_FRAME->ID_TYPE=(CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_IDE;
 8000b9e:	4b6a      	ldr	r3, [pc, #424]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	331b      	adds	r3, #27
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	4413      	add	r3, r2
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	701a      	strb	r2, [r3, #0]
	/*****************************************************************************************/
	if(RX_FRAME->ID_TYPE==STD_ID)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10c      	bne.n	8000bda <HAL_CAN_psRXFRAME+0x4a>
	{
		RX_FRAME->StdId=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_STID)>>CAN_RI0R_STID_Pos;
 8000bc0:	4b61      	ldr	r3, [pc, #388]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	331b      	adds	r3, #27
 8000bc8:	011b      	lsls	r3, r3, #4
 8000bca:	4413      	add	r3, r2
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	0d5b      	lsrs	r3, r3, #21
 8000bd0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	e00f      	b.n	8000bfa <HAL_CAN_psRXFRAME+0x6a>
	}
	else if(RX_FRAME->ID_TYPE==EXT_ID)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d10b      	bne.n	8000bfa <HAL_CAN_psRXFRAME+0x6a>
	{
		RX_FRAME->ExtId=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_EXID)>>CAN_RI0R_EXID_Pos;
 8000be2:	4b59      	ldr	r3, [pc, #356]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	331b      	adds	r3, #27
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	609a      	str	r2, [r3, #8]
	{
		//parameter ERROR
	}
	/****************************************************************************************/

	RX_FRAME->RTR=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RIR)&CAN_RI0R_RTR)>>CAN_RI0R_RTR_Pos;
 8000bfa:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	331b      	adds	r3, #27
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	4413      	add	r3, r2
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	f003 0201 	and.w	r2, r3, #1
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	60da      	str	r2, [r3, #12]

	/****************************************************************************************/

	RX_FRAME->DLC=((CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDTR)&CAN_RDT0R_DLC)>>CAN_RDT0R_DLC_Pos;
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	331b      	adds	r3, #27
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 020f 	and.w	r2, r3, #15
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	611a      	str	r2, [r3, #16]

	/****************************************************************************************/

	RX_FRAME->FILTER_BANK_INDEX=(((CAN_INSTANCE->sFIFOMailBox[RX_FIFO]).RDTR)&CAN_RDT0R_FMI)>>CAN_RDT0R_FMI_Pos;
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	331b      	adds	r3, #27
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	4413      	add	r3, r2
 8000c36:	3304      	adds	r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	615a      	str	r2, [r3, #20]

	/*****************************************************************************************/

	DATA[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	701a      	strb	r2, [r3, #0]
	DATA[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c58:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0a1a      	lsrs	r2, r3, #8
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	701a      	strb	r2, [r3, #0]
    DATA[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	0c1a      	lsrs	r2, r3, #16
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3302      	adds	r3, #2
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	701a      	strb	r2, [r3, #0]
    DATA[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	4413      	add	r3, r2
 8000c96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0e1a      	lsrs	r2, r3, #24
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	3303      	adds	r3, #3
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	701a      	strb	r2, [r3, #0]
    DATA[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	4413      	add	r3, r2
 8000cb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	701a      	strb	r2, [r3, #0]
    DATA[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	4413      	add	r3, r2
 8000cc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	0a1a      	lsrs	r2, r3, #8
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3305      	adds	r3, #5
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	701a      	strb	r2, [r3, #0]
    DATA[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	0c1a      	lsrs	r2, r3, #16
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3306      	adds	r3, #6
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	701a      	strb	r2, [r3, #0]
    DATA[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN_INSTANCE->sFIFOMailBox[RX_FIFO].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	0e1a      	lsrs	r2, r3, #24
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3307      	adds	r3, #7
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	701a      	strb	r2, [r3, #0]

    /******************************************************************************************/

    if(RX_FIFO==FIFO0)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d108      	bne.n	8000d24 <HAL_CAN_psRXFRAME+0x194>
    {
    	SET_BIT(CAN_INSTANCE->RF0R, CAN_RF0R_RFOM0);
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f042 0220 	orr.w	r2, r2, #32
 8000d20:	60da      	str	r2, [r3, #12]
    }
    else
    {
    	//parameter ERROR
    }
}
 8000d22:	e00a      	b.n	8000d3a <HAL_CAN_psRXFRAME+0x1aa>
    else if(RX_FIFO==FIFO1)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d107      	bne.n	8000d3a <HAL_CAN_psRXFRAME+0x1aa>
    	SET_BIT(CAN_INSTANCE->RF1R, CAN_RF1R_RFOM1);
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_CAN_psRXFRAME+0x1b8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f042 0220 	orr.w	r2, r2, #32
 8000d38:	611a      	str	r2, [r3, #16]
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_CAN_RX_FRAMES_NUM>:

void HAL_CAN_RX_FRAMES_NUM(E_FILTER_ASSIGN RX_FIFO,uint8_t* FRAMES_NUM)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
	*FRAMES_NUM=0;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
	if(RX_FIFO==FIFO0)
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d106      	bne.n	8000d72 <HAL_CAN_RX_FRAMES_NUM+0x26>
	{
		FRAMES_NUM = CAN_INSTANCE->RF0R & CAN_RF0R_FMP0;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_CAN_RX_FRAMES_NUM+0x44>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	603b      	str	r3, [r7, #0]
	}
	else
	{
		//parameter ERROR
	}
}
 8000d70:	e008      	b.n	8000d84 <HAL_CAN_RX_FRAMES_NUM+0x38>
	else if(RX_FIFO==FIFO1)
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <HAL_CAN_RX_FRAMES_NUM+0x38>
		FRAMES_NUM = CAN_INSTANCE->RF1R & CAN_RF1R_FMP1;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_CAN_RX_FRAMES_NUM+0x44>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	603b      	str	r3, [r7, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f90d 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff faf0 	bl	8000394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f917 	bl	8001012 <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f8ed 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000000c 	.word	0x2000000c
 8000e44:	2000002c 	.word	0x2000002c

08000e48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000002c 	.word	0x2000002c

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff47 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff5c 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffb0 	bl	8000f80 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e14e      	b.n	80012da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)/*pin_10 nit_0=0*/
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8140 	beq.w	80012d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d005      	beq.n	800106c <HAL_GPIO_Init+0x40>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d130      	bne.n	80010ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	f003 0201 	and.w	r2, r3, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d017      	beq.n	800110a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d123      	bne.n	800115e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	6939      	ldr	r1, [r7, #16]
 800115a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0203 	and.w	r2, r3, #3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 809a 	beq.w	80012d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <HAL_GPIO_Init+0x2cc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a54      	ldr	r2, [pc, #336]	; (80012f8 <HAL_GPIO_Init+0x2cc>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <HAL_GPIO_Init+0x2cc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b8:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1e0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a46      	ldr	r2, [pc, #280]	; (8001300 <HAL_GPIO_Init+0x2d4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1dc>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_GPIO_Init+0x2d8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1d8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a44      	ldr	r2, [pc, #272]	; (8001308 <HAL_GPIO_Init+0x2dc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1d4>
 80011fc:	2303      	movs	r3, #3
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1e2>
 8001200:	2305      	movs	r3, #5
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1e2>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1e2>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1e2>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x2d0>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_GPIO_Init+0x2e0>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001250:	4a2e      	ldr	r2, [pc, #184]	; (800130c <HAL_GPIO_Init+0x2e0>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_GPIO_Init+0x2e0>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800127a:	4a24      	ldr	r2, [pc, #144]	; (800130c <HAL_GPIO_Init+0x2e0>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_GPIO_Init+0x2e0>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_GPIO_Init+0x2e0>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_GPIO_Init+0x2e0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_GPIO_Init+0x2e0>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f aea9 	bne.w	800103c <HAL_GPIO_Init+0x10>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800132c:	e002      	b.n	8001334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001346:	af00      	add	r7, sp, #0
 8001348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001350:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	f001 b823 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 817d 	beq.w	8001676 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800137c:	4bbc      	ldr	r3, [pc, #752]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001388:	4bb9      	ldr	r3, [pc, #740]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d15c      	bne.n	800144e <HAL_RCC_OscConfig+0x10e>
 8001394:	4bb6      	ldr	r3, [pc, #728]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d155      	bne.n	800144e <HAL_RCC_OscConfig+0x10e>
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	095b      	lsrs	r3, r3, #5
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x94>
 80013ce:	4ba8      	ldr	r3, [pc, #672]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	e015      	b.n	8001400 <HAL_RCC_OscConfig+0xc0>
 80013d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013fc:	4b9c      	ldr	r3, [pc, #624]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001404:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001408:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800140c:	fa92 f2a2 	rbit	r2, r2
 8001410:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001414:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001418:	fab2 f282 	clz	r2, r2
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	f002 021f 	and.w	r2, r2, #31
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 811f 	beq.w	8001674 <HAL_RCC_OscConfig+0x334>
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 8116 	bne.w	8001674 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f000 bfaf 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x12e>
 8001460:	4b83      	ldr	r3, [pc, #524]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a82      	ldr	r2, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e036      	b.n	80014dc <HAL_RCC_OscConfig+0x19c>
 800146e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x158>
 800147e:	4b7c      	ldr	r3, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7b      	ldr	r2, [pc, #492]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b79      	ldr	r3, [pc, #484]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a78      	ldr	r2, [pc, #480]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e021      	b.n	80014dc <HAL_RCC_OscConfig+0x19c>
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x184>
 80014aa:	4b71      	ldr	r3, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a70      	ldr	r2, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6d      	ldr	r2, [pc, #436]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x19c>
 80014c4:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a69      	ldr	r2, [pc, #420]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b67      	ldr	r3, [pc, #412]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a66      	ldr	r2, [pc, #408]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	f023 020f 	bic.w	r2, r3, #15
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	495f      	ldr	r1, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d059      	beq.n	80015ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fc9f 	bl	8000e48 <HAL_GetTick>
 800150a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc9a 	bl	8000e48 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d902      	bls.n	8001526 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	f000 bf43 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
 8001526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800153a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	fab3 f383 	clz	r3, r3
 8001542:	b2db      	uxtb	r3, r3
 8001544:	095b      	lsrs	r3, r3, #5
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d102      	bne.n	8001558 <HAL_RCC_OscConfig+0x218>
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	e015      	b.n	8001584 <HAL_RCC_OscConfig+0x244>
 8001558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800156c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001570:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001574:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001578:	fa93 f3a3 	rbit	r3, r3
 800157c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001580:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001588:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800158c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001590:	fa92 f2a2 	rbit	r2, r2
 8001594:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001598:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800159c:	fab2 f282 	clz	r2, r2
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	f002 021f 	and.w	r2, r2, #31
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f202 	lsl.w	r2, r1, r2
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ab      	beq.n	8001510 <HAL_RCC_OscConfig+0x1d0>
 80015b8:	e05d      	b.n	8001676 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc45 	bl	8000e48 <HAL_GetTick>
 80015be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fc40 	bl	8000e48 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	d902      	bls.n	80015da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f000 bee9 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
 80015da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	095b      	lsrs	r3, r3, #5
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d102      	bne.n	800160c <HAL_RCC_OscConfig+0x2cc>
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	e015      	b.n	8001638 <HAL_RCC_OscConfig+0x2f8>
 800160c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001610:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001624:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001628:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_RCC_OscConfig+0x330>)
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800163c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001640:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001644:	fa92 f2a2 	rbit	r2, r2
 8001648:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800164c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001650:	fab2 f282 	clz	r2, r2
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	f042 0220 	orr.w	r2, r2, #32
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	f002 021f 	and.w	r2, r2, #31
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f202 	lsl.w	r2, r1, r2
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ab      	bne.n	80015c4 <HAL_RCC_OscConfig+0x284>
 800166c:	e003      	b.n	8001676 <HAL_RCC_OscConfig+0x336>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 817d 	beq.w	8001986 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800168c:	4ba6      	ldr	r3, [pc, #664]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001698:	4ba3      	ldr	r3, [pc, #652]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d172      	bne.n	800178a <HAL_RCC_OscConfig+0x44a>
 80016a4:	4ba0      	ldr	r3, [pc, #640]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d16c      	bne.n	800178a <HAL_RCC_OscConfig+0x44a>
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	095b      	lsrs	r3, r3, #5
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d102      	bne.n	80016e0 <HAL_RCC_OscConfig+0x3a0>
 80016da:	4b93      	ldr	r3, [pc, #588]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	e013      	b.n	8001708 <HAL_RCC_OscConfig+0x3c8>
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001704:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	2202      	movs	r2, #2
 800170a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800170e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001712:	fa92 f2a2 	rbit	r2, r2
 8001716:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800171a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f042 0220 	orr.w	r2, r2, #32
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f002 021f 	and.w	r2, r2, #31
 800172e:	2101      	movs	r1, #1
 8001730:	fa01 f202 	lsl.w	r2, r1, r2
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00a      	beq.n	8001750 <HAL_RCC_OscConfig+0x410>
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d002      	beq.n	8001750 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 be2e 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b75      	ldr	r3, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	21f8      	movs	r1, #248	; 0xf8
 8001766:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800176e:	fa91 f1a1 	rbit	r1, r1
 8001772:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001776:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800177a:	fab1 f181 	clz	r1, r1
 800177e:	b2c9      	uxtb	r1, r1
 8001780:	408b      	lsls	r3, r1
 8001782:	4969      	ldr	r1, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001788:	e0fd      	b.n	8001986 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8088 	beq.w	80018ac <HAL_RCC_OscConfig+0x56c>
 800179c:	2301      	movs	r3, #1
 800179e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80017ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	461a      	mov	r2, r3
 80017c4:	2301      	movs	r3, #1
 80017c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb3e 	bl	8000e48 <HAL_GetTick>
 80017cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb39 	bl	8000e48 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d902      	bls.n	80017e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	f000 bde2 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_RCC_OscConfig+0x4d8>
 8001812:	4b45      	ldr	r3, [pc, #276]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x500>
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001830:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800183c:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	2202      	movs	r2, #2
 8001842:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001846:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800184a:	fa92 f2a2 	rbit	r2, r2
 800184e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001852:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001856:	fab2 f282 	clz	r2, r2
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	f002 021f 	and.w	r2, r2, #31
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0af      	beq.n	80017d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	21f8      	movs	r1, #248	; 0xf8
 8001888:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001890:	fa91 f1a1 	rbit	r1, r1
 8001894:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001898:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800189c:	fab1 f181 	clz	r1, r1
 80018a0:	b2c9      	uxtb	r1, r1
 80018a2:	408b      	lsls	r3, r1
 80018a4:	4920      	ldr	r1, [pc, #128]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
 80018aa:	e06c      	b.n	8001986 <HAL_RCC_OscConfig+0x646>
 80018ac:	2301      	movs	r3, #1
 80018ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80018be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	461a      	mov	r2, r3
 80018d4:	2300      	movs	r3, #0
 80018d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fab6 	bl	8000e48 <HAL_GetTick>
 80018dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fab1 	bl	8000e48 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d902      	bls.n	80018f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	f000 bd5a 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
 80018f8:	2302      	movs	r3, #2
 80018fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800190a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	095b      	lsrs	r3, r3, #5
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d104      	bne.n	800192c <HAL_RCC_OscConfig+0x5ec>
 8001922:	4b01      	ldr	r3, [pc, #4]	; (8001928 <HAL_RCC_OscConfig+0x5e8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	e015      	b.n	8001954 <HAL_RCC_OscConfig+0x614>
 8001928:	40021000 	.word	0x40021000
 800192c:	2302      	movs	r3, #2
 800192e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001944:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001950:	4bc8      	ldr	r3, [pc, #800]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2202      	movs	r2, #2
 8001956:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800195a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001966:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800196a:	fab2 f282 	clz	r2, r2
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f042 0220 	orr.w	r2, r2, #32
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	f002 021f 	and.w	r2, r2, #31
 800197a:	2101      	movs	r1, #1
 800197c:	fa01 f202 	lsl.w	r2, r1, r2
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ad      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8110 	beq.w	8001bbc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d079      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x760>
 80019ac:	2301      	movs	r3, #1
 80019ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80019be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	4bab      	ldr	r3, [pc, #684]	; (8001c78 <HAL_RCC_OscConfig+0x938>)
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	461a      	mov	r2, r3
 80019d2:	2301      	movs	r3, #1
 80019d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7ff fa37 	bl	8000e48 <HAL_GetTick>
 80019da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff fa32 	bl	8000e48 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d902      	bls.n	80019f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	f000 bcdb 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
 80019f6:	2302      	movs	r3, #2
 80019f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a34:	2202      	movs	r2, #2
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a50:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	6019      	str	r1, [r3, #0]
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f1a3 	rbit	r1, r3
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a76:	6019      	str	r1, [r3, #0]
  return result;
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0a0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x6a0>
 8001a9e:	e08d      	b.n	8001bbc <HAL_RCC_OscConfig+0x87c>
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	fa93 f2a3 	rbit	r2, r3
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ac2:	601a      	str	r2, [r3, #0]
  return result;
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001acc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x938>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f9b1 	bl	8000e48 <HAL_GetTick>
 8001ae6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f9ac 	bl	8000e48 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 bc55 	b.w	80023ac <HAL_RCC_OscConfig+0x106c>
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b2e:	2202      	movs	r2, #2
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b52:	2202      	movs	r2, #2
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fa93 f2a3 	rbit	r2, r3
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	6019      	str	r1, [r3, #0]
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f1a3 	rbit	r1, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b94:	6019      	str	r1, [r3, #0]
  return result;
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d197      	bne.n	8001aec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 81a1 	beq.w	8001f14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d116      	bne.n	8001c12 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	61d3      	str	r3, [r2, #28]
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c0a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_RCC_OscConfig+0x93c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d11a      	bne.n	8001c54 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_RCC_OscConfig+0x93c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_RCC_OscConfig+0x93c>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f90d 	bl	8000e48 <HAL_GetTick>
 8001c2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	e009      	b.n	8001c48 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c34:	f7ff f908 	bl	8000e48 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b64      	cmp	r3, #100	; 0x64
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e3b1      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_RCC_OscConfig+0x93c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ef      	beq.n	8001c34 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x940>
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a02      	ldr	r2, [pc, #8]	; (8001c74 <HAL_RCC_OscConfig+0x934>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	e03c      	b.n	8001cec <HAL_RCC_OscConfig+0x9ac>
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	10908120 	.word	0x10908120
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCC_OscConfig+0x96a>
 8001c90:	4bc1      	ldr	r3, [pc, #772]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4ac0      	ldr	r2, [pc, #768]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001c96:	f023 0301 	bic.w	r3, r3, #1
 8001c9a:	6213      	str	r3, [r2, #32]
 8001c9c:	4bbe      	ldr	r3, [pc, #760]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4abd      	ldr	r2, [pc, #756]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001ca2:	f023 0304 	bic.w	r3, r3, #4
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e020      	b.n	8001cec <HAL_RCC_OscConfig+0x9ac>
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x994>
 8001cba:	4bb7      	ldr	r3, [pc, #732]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4ab6      	ldr	r2, [pc, #728]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4bb4      	ldr	r3, [pc, #720]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4ab3      	ldr	r2, [pc, #716]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x9ac>
 8001cd4:	4bb0      	ldr	r3, [pc, #704]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4aaf      	ldr	r2, [pc, #700]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	4bad      	ldr	r3, [pc, #692]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4aac      	ldr	r2, [pc, #688]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8081 	beq.w	8001e00 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f8a3 	bl	8000e48 <HAL_GetTick>
 8001d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff f89e 	bl	8000e48 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e345      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d102      	bne.n	8001d8c <HAL_RCC_OscConfig+0xa4c>
 8001d86:	4b84      	ldr	r3, [pc, #528]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	e013      	b.n	8001db4 <HAL_RCC_OscConfig+0xa74>
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d94:	2202      	movs	r2, #2
 8001d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	fa93 f2a3 	rbit	r2, r3
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	4b79      	ldr	r3, [pc, #484]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	6011      	str	r1, [r2, #0]
 8001dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dc4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	fa92 f1a2 	rbit	r1, r2
 8001dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dd6:	6011      	str	r1, [r2, #0]
  return result;
 8001dd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ddc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d084      	beq.n	8001d08 <HAL_RCC_OscConfig+0x9c8>
 8001dfe:	e07f      	b.n	8001f00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff f822 	bl	8000e48 <HAL_GetTick>
 8001e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff f81d 	bl	8000e48 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e2c4      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e68:	601a      	str	r2, [r3, #0]
  return result;
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d102      	bne.n	8001e8e <HAL_RCC_OscConfig+0xb4e>
 8001e88:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	e013      	b.n	8001eb6 <HAL_RCC_OscConfig+0xb76>
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e96:	2202      	movs	r2, #2
 8001e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	fa93 f2a3 	rbit	r2, r3
 8001ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	6011      	str	r1, [r2, #0]
 8001ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	fa92 f1a2 	rbit	r1, r2
 8001ed0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ed8:	6011      	str	r1, [r2, #0]
  return result;
 8001eda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ede:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d184      	bne.n	8001e0a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f00:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8242 	beq.w	80023aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_RCC_OscConfig+0xc58>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	f000 8213 	beq.w	800235a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	f040 8162 	bne.w	800220a <HAL_RCC_OscConfig+0xeca>
 8001f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f66:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f6a:	601a      	str	r2, [r3, #0]
  return result;
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	461a      	mov	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe ff5c 	bl	8000e48 <HAL_GetTick>
 8001f90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f94:	e00c      	b.n	8001fb0 <HAL_RCC_OscConfig+0xc70>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe ff54 	bl	8000e48 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1fd      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fd4:	601a      	str	r2, [r3, #0]
  return result;
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_OscConfig+0xcba>
 8001ff4:	4bb0      	ldr	r3, [pc, #704]	; (80022b8 <HAL_RCC_OscConfig+0xf78>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	e027      	b.n	800204a <HAL_RCC_OscConfig+0xd0a>
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fa93 f2a3 	rbit	r2, r3
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002028:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	4b9c      	ldr	r3, [pc, #624]	; (80022b8 <HAL_RCC_OscConfig+0xf78>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800204e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002052:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002056:	6011      	str	r1, [r2, #0]
 8002058:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800205c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	fa92 f1a2 	rbit	r1, r2
 8002066:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800206a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800206e:	6011      	str	r1, [r2, #0]
  return result;
 8002070:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002074:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	fab2 f282 	clz	r2, r2
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	f042 0220 	orr.w	r2, r2, #32
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f002 021f 	and.w	r2, r2, #31
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d182      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002096:	4b88      	ldr	r3, [pc, #544]	; (80022b8 <HAL_RCC_OscConfig+0xf78>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	430b      	orrs	r3, r1
 80020b8:	497f      	ldr	r1, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0xf78>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
 80020be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	fa93 f2a3 	rbit	r2, r3
 80020da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020e2:	601a      	str	r2, [r3, #0]
  return result;
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fea0 	bl	8000e48 <HAL_GetTick>
 8002108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800210c:	e009      	b.n	8002122 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f7fe fe9b 	bl	8000e48 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e144      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800212a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002146:	601a      	str	r2, [r3, #0]
  return result;
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002150:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_RCC_OscConfig+0xe2c>
 8002166:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <HAL_RCC_OscConfig+0xf78>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e027      	b.n	80021bc <HAL_RCC_OscConfig+0xe7c>
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800219a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	4b3f      	ldr	r3, [pc, #252]	; (80022b8 <HAL_RCC_OscConfig+0xf78>)
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021c8:	6011      	str	r1, [r2, #0]
 80021ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	fa92 f1a2 	rbit	r1, r2
 80021d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021dc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021e0:	6011      	str	r1, [r2, #0]
  return result;
 80021e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	fab2 f282 	clz	r2, r2
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	f042 0220 	orr.w	r2, r2, #32
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f002 021f 	and.w	r2, r2, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d082      	beq.n	800210e <HAL_RCC_OscConfig+0xdce>
 8002208:	e0cf      	b.n	80023aa <HAL_RCC_OscConfig+0x106a>
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002212:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800222e:	601a      	str	r2, [r3, #0]
  return result;
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002238:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002244:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fdfa 	bl	8000e48 <HAL_GetTick>
 8002254:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	e009      	b.n	800226e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fdf5 	bl	8000e48 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e09e      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002292:	601a      	str	r2, [r3, #0]
  return result;
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800229c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d104      	bne.n	80022bc <HAL_RCC_OscConfig+0xf7c>
 80022b2:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <HAL_RCC_OscConfig+0xf78>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	e029      	b.n	800230c <HAL_RCC_OscConfig+0xfcc>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	fa93 f2a3 	rbit	r2, r3
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_OscConfig+0x1078>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002310:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002314:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800231e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	fa92 f1a2 	rbit	r1, r2
 8002328:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800232c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002330:	6011      	str	r1, [r2, #0]
  return result;
 8002332:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002336:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	fab2 f282 	clz	r2, r2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f002 021f 	and.w	r2, r2, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f202 	lsl.w	r2, r1, r2
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d180      	bne.n	800225a <HAL_RCC_OscConfig+0xf1a>
 8002358:	e027      	b.n	80023aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e01e      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_OscConfig+0x1078>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002376:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800237a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	429a      	cmp	r2, r3
 800238c:	d10b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800238e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b09e      	sub	sp, #120	; 0x78
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e162      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b90      	ldr	r3, [pc, #576]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d910      	bls.n	8002404 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	498b      	ldr	r1, [pc, #556]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b89      	ldr	r3, [pc, #548]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e14a      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b82      	ldr	r3, [pc, #520]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	497f      	ldr	r1, [pc, #508]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80dc 	beq.w	80025e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d13c      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xf6>
 8002438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d102      	bne.n	8002462 <HAL_RCC_ClockConfig+0xa6>
 800245c:	4b6f      	ldr	r3, [pc, #444]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e00f      	b.n	8002482 <HAL_RCC_ClockConfig+0xc6>
 8002462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	667b      	str	r3, [r7, #100]	; 0x64
 8002470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002474:	663b      	str	r3, [r7, #96]	; 0x60
 8002476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002486:	65ba      	str	r2, [r7, #88]	; 0x58
 8002488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800248a:	fa92 f2a2 	rbit	r2, r2
 800248e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f042 0220 	orr.w	r2, r2, #32
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f002 021f 	and.w	r2, r2, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d17b      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0f3      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d13c      	bne.n	8002534 <HAL_RCC_ClockConfig+0x178>
 80024ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d102      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x128>
 80024de:	4b4f      	ldr	r3, [pc, #316]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_ClockConfig+0x148>
 80024e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	647b      	str	r3, [r7, #68]	; 0x44
 80024f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f6:	643b      	str	r3, [r7, #64]	; 0x40
 80024f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002500:	4b46      	ldr	r3, [pc, #280]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002508:	63ba      	str	r2, [r7, #56]	; 0x38
 800250a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250c:	fa92 f2a2 	rbit	r2, r2
 8002510:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002514:	fab2 f282 	clz	r2, r2
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d13a      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b2      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
 8002534:	2302      	movs	r3, #2
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d102      	bne.n	800255c <HAL_RCC_ClockConfig+0x1a0>
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	e00d      	b.n	8002578 <HAL_RCC_ClockConfig+0x1bc>
 800255c:	2302      	movs	r3, #2
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2202      	movs	r2, #2
 800257a:	61ba      	str	r2, [r7, #24]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	fa92 f2a2 	rbit	r2, r2
 8002582:	617a      	str	r2, [r7, #20]
  return result;
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e079      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	491a      	ldr	r1, [pc, #104]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fc46 	bl	8000e48 <HAL_GetTick>
 80025bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fc42 	bl	8000e48 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e061      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d214      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4906      	ldr	r1, [pc, #24]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_ClockConfig+0x25c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e040      	b.n	800269a <HAL_RCC_ClockConfig+0x2de>
 8002618:	40022000 	.word	0x40022000
 800261c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	491a      	ldr	r1, [pc, #104]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264a:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4912      	ldr	r1, [pc, #72]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800265e:	f000 f829 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002662:	4601      	mov	r1, r0
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266c:	22f0      	movs	r2, #240	; 0xf0
 800266e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	fa92 f2a2 	rbit	r2, r2
 8002676:	60fa      	str	r2, [r7, #12]
  return result;
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	40d3      	lsrs	r3, r2
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	fa21 f303 	lsr.w	r3, r1, r3
 800268a:	4a08      	ldr	r2, [pc, #32]	; (80026ac <HAL_RCC_ClockConfig+0x2f0>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fb94 	bl	8000dc0 <HAL_InitTick>
  
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3778      	adds	r7, #120	; 0x78
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08002834 	.word	0x08002834
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000008 	.word	0x20000008

080026b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b08b      	sub	sp, #44	; 0x2c
 80026b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x30>
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x36>
 80026e2:	e03c      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e4:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026e6:	623b      	str	r3, [r7, #32]
      break;
 80026e8:	e03c      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80026f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80026f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	fa92 f2a2 	rbit	r2, r2
 80026fc:	607a      	str	r2, [r7, #4]
  return result;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	40d3      	lsrs	r3, r2
 8002708:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_RCC_GetSysClockFreq+0xc8>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	220f      	movs	r2, #15
 8002718:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	fa92 f2a2 	rbit	r2, r2
 8002720:	60fa      	str	r2, [r7, #12]
  return result;
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	fab2 f282 	clz	r2, r2
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	40d3      	lsrs	r3, r2
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_RCC_GetSysClockFreq+0xcc>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	fbb2 f2f3 	udiv	r2, r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
 800274c:	e004      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	623b      	str	r3, [r7, #32]
      break;
 800275c:	e002      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002760:	623b      	str	r3, [r7, #32]
      break;
 8002762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002764:	6a3b      	ldr	r3, [r7, #32]
}
 8002766:	4618      	mov	r0, r3
 8002768:	372c      	adds	r7, #44	; 0x2c
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	007a1200 	.word	0x007a1200
 800277c:	08002844 	.word	0x08002844
 8002780:	08002854 	.word	0x08002854
 8002784:	003d0900 	.word	0x003d0900

08002788 <memset>:
 8002788:	4402      	add	r2, r0
 800278a:	4603      	mov	r3, r0
 800278c:	4293      	cmp	r3, r2
 800278e:	d100      	bne.n	8002792 <memset+0xa>
 8002790:	4770      	bx	lr
 8002792:	f803 1b01 	strb.w	r1, [r3], #1
 8002796:	e7f9      	b.n	800278c <memset+0x4>

08002798 <__libc_init_array>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	4d0d      	ldr	r5, [pc, #52]	; (80027d0 <__libc_init_array+0x38>)
 800279c:	4c0d      	ldr	r4, [pc, #52]	; (80027d4 <__libc_init_array+0x3c>)
 800279e:	1b64      	subs	r4, r4, r5
 80027a0:	10a4      	asrs	r4, r4, #2
 80027a2:	2600      	movs	r6, #0
 80027a4:	42a6      	cmp	r6, r4
 80027a6:	d109      	bne.n	80027bc <__libc_init_array+0x24>
 80027a8:	4d0b      	ldr	r5, [pc, #44]	; (80027d8 <__libc_init_array+0x40>)
 80027aa:	4c0c      	ldr	r4, [pc, #48]	; (80027dc <__libc_init_array+0x44>)
 80027ac:	f000 f818 	bl	80027e0 <_init>
 80027b0:	1b64      	subs	r4, r4, r5
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	2600      	movs	r6, #0
 80027b6:	42a6      	cmp	r6, r4
 80027b8:	d105      	bne.n	80027c6 <__libc_init_array+0x2e>
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c0:	4798      	blx	r3
 80027c2:	3601      	adds	r6, #1
 80027c4:	e7ee      	b.n	80027a4 <__libc_init_array+0xc>
 80027c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ca:	4798      	blx	r3
 80027cc:	3601      	adds	r6, #1
 80027ce:	e7f2      	b.n	80027b6 <__libc_init_array+0x1e>
 80027d0:	08002864 	.word	0x08002864
 80027d4:	08002864 	.word	0x08002864
 80027d8:	08002864 	.word	0x08002864
 80027dc:	08002868 	.word	0x08002868

080027e0 <_init>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr

080027ec <_fini>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr
